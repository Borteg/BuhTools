
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	НастройкиПользователяУФС = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериодКомпоновки = Новый ПараметрКомпоновкиДанных("Период");
	ПараметрПериод = НастройкиПользователяУФС.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрПериодКомпоновки);
	
	ДатаНачала = ПараметрПериод.Значение.ДатаНачала;
	ДатаОкончания = ПараметрПериод.Значение.ДатаОкончания;
		
	ПараметрВидОтчетаКомпоновки = Новый ПараметрКомпоновкиДанных("ВидОтчета");
	ПараметрВидОтчета = НастройкиПользователяУФС.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрВидОтчетаКомпоновки);
	
	ВидОтчета = ПараметрВидОтчета.Значение; 
	
	Если ДатаОкончания >= Дата('20210501000000') Тогда
		СФормироватьОтчетНовый(ДокументРезультат,ВидОтчета,ДатаНачала,ДатаОкончания);		
	Иначе
		СформироватьОтчетСтарый(ДокументРезультат,ВидОтчета,ДатаНачала,ДатаОкончания);	
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчетСтарый(ДокументРезультат,ВидОтчета,ДатаНачала,ДатаОкончания)
	
	ДатаНачалаСтрока = Формат(ДатаНачала,"ДФ=yyyyMMdd");
	ДатаОкончанияСтрока = Формат(ДатаОкончания,"ДФ=yyyyMMdd");
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionTimeout  = 0;
	Connection.CommandTimeout   = 0;
	Connection.Open ("DRIVER={SQL Server};SERVER=db1;UID=fin_auditor;PWD=Cdthrf123;DATABASE=PGW2_R");
	
	ТекстЗапроса = "set transaction isolation level read uncommitted
	|SET NOCOUNT ON
	| DECLARE @begDate DATETIME = '"+ДатаНачалаСтрока+"' --Дата начала (включительно)
	| DECLARE @endDate DATETIME = '" +ДатаОкончанияСтрока+"' --Дата окончания (включительно)
	| DECLARE @ShowReturned INT = " +ВидОтчета+" -- Если 1, то показывать все, если 0, то исключить возвращённые и купленные в данном временном промежутке, если 2, то показывать только возвращённые и купленные в этот период
	| SELECT			p.ticketid 'Номер электронного билета'
	|				,t.ConfirmDate 'Дата продажи'
	|				,t.amount/o.nplace 'Сумма продажи' --<Сумма транзакции>/<Кол-во мест>
	|				,t.ConfirmDate 'Дата оплаты' --Для нас совпадает с датой продажи 
	|				,'' AS '№ платёжного документа' --Пустое поле
	|				,t.amount/o.nplace 'Сумма поступившей оплаты' --<Сумма транзакции>/<Кол-во мест>
	|				,o.depttime 'Дата проезда' 
	|				,ISNULL(CASE WHEN m.idMember = 46354 THEN 'Физическое лицо' ELSE m.nameMember END,'Физическое лицо') 'Наименование контрагента'
	|				,CASE WHEN m.idMember = 46354 THEN '' ELSE mp1.value END AS 'ИНН'
	|				,CASE WHEN m.idMember = 46354 THEN '' ELSE mp2.value END AS 'КПП'
	|				,CASE WHEN m.idMember = 46354 THEN '' ELSE mp3.value END AS 'Юридический адрес'
	|				,ISNULL(CASE WHEN m.idparent_member = 46354 THEN 'Физическое лицо' ELSE  m2.nameMember END,'Физическое лицо') 'Наименование субагента'
	|				,CASE WHEN m.idparent_member = 46354 THEN '' ELSE mp21.value END AS 'ИНН Субагента'
	|				,CASE WHEN m.idparent_member = 46354 THEN '' ELSE mp22.value END AS 'КПП Субагента'
	|				,CASE WHEN m.idparent_member = 46354 THEN '' ELSE mp23.value END AS 'Юридический адрес Субагента'
	|				FROM	Trans t (NOLOCK) JOIN 
	|						orRzhdAE o (NOLOCK) ON t.idtrans = o.idtrans JOIN 
	|						AeroPassenger p (NOLOCK) ON p.TransId = t.idtrans JOIN
	|						members m (NOLOCK) ON t.idPayer = m.idMember LEFT JOIN
	|						ufs_MemParams mp1 (NOLOCK) ON m.idMember=mp1.idmember AND mp1.type = 8 LEFT JOIN
	|						ufs_MemParams mp2 (NOLOCK) ON m.idMember=mp2.idmember AND mp2.type = 9 LEFT JOIN
	|						ufs_MemParams mp3 (NOLOCK) ON m.idMember=mp3.idmember AND mp3.type = 1 LEFT JOIN
	|				pos (NOLOCK) ON pos.idpos = t.idPOS AND pos.idmember NOT IN (m.idMember,46354) LEFT JOIN		
	|				members m2 (NOLOCK) ON m2.idMember = pos.idmember OR (m.idparent_member NOT IN (0, 46354) 
	|				AND m.idparent_member = m2.idMember) LEFT JOIN
	|				ufs_MemParams mp21 (NOLOCK) ON m2.idMember=mp21.idmember AND mp21.type = 8 LEFT JOIN
	|				ufs_MemParams mp22 (NOLOCK) ON m2.idMember=mp22.idmember AND mp22.type = 9 LEFT JOIN
	|				ufs_MemParams mp23 (NOLOCK) ON m2.idMember=mp23.idmember AND mp23.type = 1
	|				WHERE --Условия
	|				t.status = 0 --транзакция успешная
	|				AND t.test = 0 --не тестовая
	|				AND t.type = 1 --покупка
	|				AND t.ConfirmDate>@begDate --Дата подтверждения с 2015-03-01
	|				AND t.ConfirmDate<DATEADD(dd,1,@endDate) --Дата подтверждения до 2015-03-11
	|				AND 1 = 
	|				CASE @ShowReturned WHEN 1 THEN 1
	|				WHEN 0 THEN (SELECT COUNT(*) FROM Trans t (NOLOCK) JOIN AeroPassenger a (NOLOCK) ON t.idtrans = a.TransId 
	|				AND a.ticketid=p.ticketid AND
	|				t.status = 0 --транзакция успешная
	|				AND t.test = 0 --не тестовая
	|				AND t.ConfirmDate>@begDate 
	|				AND t.ConfirmDate<DATEADD(dd,1,@endDate) )
	|				WHEN 2 THEN (SELECT COUNT(*)-1 FROM Trans t (NOLOCK) JOIN AeroPassenger a (NOLOCK) ON t.idtrans = a.TransId 
	|				AND a.ticketid=p.ticketid AND
	|				t.status = 0 --транзакция успешная
	|				AND t.test = 0 --не тестовая
	|				AND t.ConfirmDate>@begDate 
	|				AND t.ConfirmDate<DATEADD(dd,1,@endDate) ) END
	| ORDER BY 2";
	
	RecordSet = Connection.Execute(ТекстЗапроса);
	
	//RS = Новый COMОбъект("ADODB.Recordset"); 
	
	// Запрос к базе на языке SQL запросов.
	
	//RS.Open("Select * from TradeUnit", Connection);
	ТаблицаСДанными = Новый ТаблицаЗначений;
	ТаблицаСДанными.Колонки.Добавить("Номерэлектронногобилета",,"Номер электронного билета");
	ТаблицаСДанными.Колонки.Добавить("Датапродажи",,"Дата продажи");
	ТаблицаСДанными.Колонки.Добавить("Суммапродажи",,"Сумма продажи");
	ТаблицаСДанными.Колонки.Добавить("Датаоплаты",,"Дата оплаты'");
	ТаблицаСДанными.Колонки.Добавить("Номерплатёжногодокумента",,"№ платёжного документа");
	ТаблицаСДанными.Колонки.Добавить("Суммапоступившейоплаты",,"Сумма поступившей оплаты");
	ТаблицаСДанными.Колонки.Добавить("Датапроезда",,"Дата проезда");
	ТаблицаСДанными.Колонки.Добавить("Наименованиеконтрагента",,"Наименование контрагента");
	ТаблицаСДанными.Колонки.Добавить("ИННКонтрагента",,"ИНН");
	ТаблицаСДанными.Колонки.Добавить("КППКонтрагента",,"КПП");
	ТаблицаСДанными.Колонки.Добавить("ЮридическийадресКонтрагента",,"Юридический адрес");
	ТаблицаСДанными.Колонки.Добавить("Наименованиесубагента",,"Наименование субагента");
	ТаблицаСДанными.Колонки.Добавить("ИННсубагента",,"ИНН Субагента");
	ТаблицаСДанными.Колонки.Добавить("КППсубагента",,"КПП Субагента");
	ТаблицаСДанными.Колонки.Добавить("Юридическийадрессубагента",,"Юридический адрес Субагента");
	
	Пока НЕ RecordSet.EOF() Цикл
		
		НоваяСтрока = ТаблицаСДанными.Добавить();
		НоваяСтрока.Номерэлектронногобилета = RecordSet.Fields("Номер электронного билета").Value;
		
		НоваяСтрока.Датапродажи = RecordSet.Fields("Дата продажи").Value;
		НоваяСтрока.Суммапродажи = RecordSet.Fields("Сумма продажи").Value;
		НоваяСтрока.Датаоплаты = RecordSet.Fields("Дата оплаты").Value;
		
		НоваяСтрока.Номерплатёжногодокумента = RecordSet.Fields("№ платёжного документа").Value;
		НоваяСтрока.Суммапоступившейоплаты = RecordSet.Fields("Сумма поступившей оплаты").Value;
		НоваяСтрока.Датапроезда = RecordSet.Fields("Дата проезда").Value;
		
		НоваяСтрока.Наименованиеконтрагента = RecordSet.Fields("Наименование контрагента").Value;
		Если  СтрНайти(НоваяСтрока.Наименованиеконтрагента,"Сбербанк Спасибо") > 0 Тогда
			НоваяСтрока.Наименованиеконтрагента  = "Физическое лицо";
		КонецЕсли;
		
		Если НоваяСтрока.Наименованиеконтрагента  = "Физическое лицо" Тогда
			НоваяСтрока.ИННКонтрагента = "";
			НоваяСтрока.КППКонтрагента = "";
			НоваяСтрока.ЮридическийадресКонтрагента = "";
		Иначе	
			НоваяСтрока.ИННКонтрагента = RecordSet.Fields("ИНН").Value;
			НоваяСтрока.КППКонтрагента = RecordSet.Fields("КПП").Value;
			НоваяСтрока.ЮридическийадресКонтрагента = RecordSet.Fields("Юридический адрес").Value;
		КонецЕсли;
		
		НоваяСтрока.Наименованиесубагента = RecordSet.Fields("Наименование субагента").Value;
		Если  СтрНайти(НоваяСтрока.Наименованиесубагента,"Сбербанк Спасибо") > 0 Тогда
			НоваяСтрока.Наименованиесубагента  = "Физическое лицо";
		КонецЕсли;
		Если НоваяСтрока.Наименованиесубагента =  "Физическое лицо" Тогда
			НоваяСтрока.ИННсубагента = "";
			НоваяСтрока.КППсубагента = "";
			НоваяСтрока.Юридическийадрессубагента = "";
		Иначе	
			НоваяСтрока.ИННсубагента = RecordSet.Fields("ИНН Субагента").Value;
			НоваяСтрока.КППсубагента = RecordSet.Fields("КПП Субагента").Value;
			НоваяСтрока.Юридическийадрессубагента = RecordSet.Fields("Юридический адрес Субагента").Value;
		КонецЕсли;
		RecordSet.MoveNext();
		
	КонецЦикла;    
	
	RecordSet.Close();
	
	ТекстЗапросаВозвраты = "set transaction isolation level read uncommitted
	|SET NOCOUNT ON
	| DECLARE @begDate DATETIME = '"+ДатаНачалаСтрока+"' --Дата начала (включительно)
	| DECLARE @endDate DATETIME = '" +ДатаОкончанияСтрока+"' --Дата окончания (включительно)
	| DECLARE @ShowReturned INT = " +ВидОтчета+" -- Если 1, то показывать все, если 0, то исключить возвращённые и купленные в данном временном промежутке, если 2, то показывать только возвращённые и купленные в этот период
	| SELECT DISTINCT  p.ticketid 'Номер электронного билета'
	| 			,t2.ConfirmDate 'Дата продажи'
	| 			,t.amount/o.nplace 'Сумма продажи' --<Сумма транзакции>/<Кол-во мест>
	| 			,t.ConfirmDate 'Дата возврата'
	| 			--,'' AS '_' --Пустое поле
	| 			--,o2.depttime 'Дата проезда' 
	| 			--,t2.ConfirmDate 'Дата оплаты' --Для нас совпадает с датой продажи  			
	| 			--,t.ConfirmDate 'Дата возврата'
	| 			--,t.amount/o.nplace 'Сумма возврата' --<Сумма транзакции>/<Кол-во мест>
	|			,ISNULL(CASE WHEN m.idMember = 46354 THEN 'Физическое лицо' ELSE m.nameMember END,'Физическое лицо') 'Наименование контрагента'
	| 			,CASE WHEN m.idMember = 46354 THEN '' ELSE mp1.value END AS 'ИНН'
	| 			,CASE WHEN m.idMember = 46354 THEN '' ELSE mp2.value END AS 'КПП'
	| 			,CASE WHEN m.idMember = 46354 THEN '' ELSE mp3.value END AS 'Юридический адрес'
	|			,ISNULL(CASE WHEN m.idparent_member = 46354 THEN 'Физическое лицо' ELSE  m2.nameMember END,'Физическое лицо') 'Наименование субагента'
	| 			,CASE WHEN m.idparent_member = 46354 THEN '' ELSE mp21.value END AS 'ИНН Субагента'
	| 			,CASE WHEN m.idparent_member = 46354 THEN '' ELSE mp22.value END AS 'КПП Субагента'
	| 			,CASE WHEN m.idparent_member = 46354 THEN '' ELSE mp23.value END AS 'Юридический адрес Субагента'
	| 			FROM	Trans t (NOLOCK) JOIN 
	| 					orRzhdAE o (NOLOCK) ON t.idtrans = o.idtrans JOIN 
	| 					Trans t2 (NOLOCK) ON t2.idtrans = t.prevTr JOIN
	| 					orRzhdAE o2 (NOLOCK) ON o2.idtrans = t2.idtrans LEFT JOIN
	| 					AeroPassenger p (NOLOCK) ON p.TransId = t.idtrans JOIN
	| 					members m (NOLOCK) ON t.idPayer = m.idMember LEFT JOIN
	| 					ufs_MemParams mp1 (NOLOCK) ON m.idMember=mp1.idmember AND mp1.type = 8 LEFT JOIN
	| 					ufs_MemParams mp2 (NOLOCK) ON m.idMember=mp2.idmember AND mp2.type = 9 LEFT JOIN
	| 					ufs_MemParams mp3 (NOLOCK) ON m.idMember=mp3.idmember AND mp3.type = 1 LEFT JOIN
	| 			pos (NOLOCK) ON pos.idpos = t.idPOS AND pos.idmember NOT IN (m.idMember,46354) LEFT JOIN		
	| 			members m2 (NOLOCK) ON m2.idMember = pos.idmember OR (m.idparent_member NOT IN (0, 46354) 
	| 			AND m.idparent_member = m2.idMember) LEFT JOIN
	| 			ufs_MemParams mp21 (NOLOCK) ON m2.idMember=mp21.idmember AND mp21.type = 8 LEFT JOIN
	| 			ufs_MemParams mp22 (NOLOCK) ON m2.idMember=mp22.idmember AND mp22.type = 9 LEFT JOIN
	| 			ufs_MemParams mp23 (NOLOCK) ON m2.idMember=mp23.idmember AND mp23.type = 1
	| 			WHERE --Условия
	| 			t.status = 0 --транзакция успешная
	| 			AND t.test = 0 --не тестовая
	| 			AND t.type = 14 --Возврат
	| 			AND t.ConfirmDate>@begDate --Дата подтверждения возврата с 2015-03-01
	| 			AND t.ConfirmDate<DATEADD(dd,1,@endDate) --Дата подтверждения возврата до 2015-03-11
	| 			AND 1 = 
	| 			CASE @ShowReturned WHEN 1 THEN 1
	| 			WHEN 0 THEN (SELECT COUNT(*) FROM Trans t (NOLOCK) JOIN AeroPassenger a (NOLOCK) ON t.idtrans = a.TransId 
	| 			AND a.ticketid=p.ticketid AND
	| 			t.status = 0 --транзакция успешная
	| 			AND t.test = 0 --не тестовая
	| 			AND t.ConfirmDate>@begDate 
	| 			AND t.ConfirmDate<DATEADD(dd,1,@endDate) )
	| 			WHEN 2 THEN (SELECT COUNT(*)-1 FROM Trans t (NOLOCK) JOIN AeroPassenger a (NOLOCK) ON t.idtrans = a.TransId 
	| 			AND a.ticketid=p.ticketid AND
	| 			t.status = 0 --транзакция успешная
	| 			AND t.test = 0 --не тестовая
	| 			AND t.ConfirmDate>@begDate 
	| 			AND t.ConfirmDate<DATEADD(dd,1,@endDate) ) END
	| ORDER BY 6";
	
	RecordSet = Connection.Execute(ТекстЗапросаВозвраты);
	
	ТаблицаСДаннымиВозвратов = Новый ТаблицаЗначений;
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("Номерэлектронногобилета",,"Номер электронного билета");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("Датапродажи",,"Дата продажи");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("Суммапродажи",,"Сумма продажи");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("Датавозврата",,"Дата возврата'");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("Датавозвратаденежныхсредствпокупателю",,"Дата возврата денежных средств покупателю");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("Наименованиеконтрагента",,"Наименование контрагента");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("ИННКонтрагента",,"ИНН");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("КППКонтрагента",,"КПП");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("ЮридическийадресКонтрагента",,"Юридический адрес");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("Наименованиесубагента",,"Наименование субагента");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("ИННсубагента",,"ИНН Субагента");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("КППсубагента",,"КПП Субагента");
	ТаблицаСДаннымиВозвратов.Колонки.Добавить("Юридическийадрессубагента",,"Юридический адрес Субагента");
	
	Пока НЕ RecordSet.EOF() Цикл
		
		НоваяСтрока = ТаблицаСДаннымиВозвратов.Добавить();
		НоваяСтрока.Номерэлектронногобилета = RecordSet.Fields("Номер электронного билета").Value;
		
		НоваяСтрока.Датапродажи = RecordSet.Fields("Дата продажи").Value;
		НоваяСтрока.Суммапродажи = RecordSet.Fields("Сумма продажи").Value;
		НоваяСтрока.Датавозврата = RecordSet.Fields("Дата возврата").Value;
		
		НоваяСтрока.Датавозвратаденежныхсредствпокупателю = RecordSet.Fields("Дата возврата").Value;
		
		
		НоваяСтрока.Наименованиеконтрагента = RecordSet.Fields("Наименование контрагента").Value;
		
		НоваяСтрока.Наименованиеконтрагента = RecordSet.Fields("Наименование контрагента").Value;
		Если  СтрНайти(НоваяСтрока.Наименованиеконтрагента,"Сбербанк Спасибо") > 0 Тогда
			НоваяСтрока.Наименованиеконтрагента  = "Физическое лицо";
		КонецЕсли;
		Если НоваяСтрока.Наименованиеконтрагента  = "Физическое лицо" Тогда
			НоваяСтрока.ИННКонтрагента = "";
			НоваяСтрока.КППКонтрагента = "";
			НоваяСтрока.ЮридическийадресКонтрагента = "";
		Иначе	
			НоваяСтрока.ИННКонтрагента = RecordSet.Fields("ИНН").Value;
			НоваяСтрока.КППКонтрагента = RecordSet.Fields("КПП").Value;
			НоваяСтрока.ЮридическийадресКонтрагента = RecordSet.Fields("Юридический адрес").Value;
		КонецЕсли;
		
		НоваяСтрока.Наименованиесубагента = RecordSet.Fields("Наименование субагента").Value;
		Если  СтрНайти(НоваяСтрока.Наименованиесубагента,"Сбербанк Спасибо") > 0 Тогда
			НоваяСтрока.Наименованиесубагента  = "Физическое лицо";
		КонецЕсли;
		
		Если НоваяСтрока.Наименованиесубагента =  "Физическое лицо" Тогда
			НоваяСтрока.ИННсубагента = "";
			НоваяСтрока.КППсубагента = "";
			НоваяСтрока.Юридическийадрессубагента = "";
		Иначе
			НоваяСтрока.ИННсубагента = RecordSet.Fields("ИНН Субагента").Value;
			НоваяСтрока.КППсубагента = RecordSet.Fields("КПП Субагента").Value;
			НоваяСтрока.Юридическийадрессубагента = RecordSet.Fields("Юридический адрес Субагента").Value;
		КонецЕсли;
		RecordSet.MoveNext();
		
	КонецЦикла; 
	
	RecordSet.Close();
	
	Connection.Close();
	
	Макет = ПолучитьМакет("МакетОтчетаАэроэкспресс");
	ТабличныйДокументУФС = Новый ТабличныйДокумент;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ОбластьИтогоПродажи = Макет.ПолучитьОбласть("СтрокаИтого");
	ОбластьИтогоВозвраты = Макет.ПолучитьОбласть("СтрокаИтогоВозвраты");
	
	//Возвраты
	ОбластьТекстВозвраты = Макет.ПолучитьОбласть("ТекстВозвраты");
	ОбластьШапкаВозвраты = Макет.ПолучитьОбласть("ЗаголовокВозвраты");
	
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалОтчета");
	
	ТабличныйДокументУФС.АвтоМасштаб = истина;
	ТабличныйДокументУФС.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокументУФС.ПолеСлева = 5;
	
	
	ОбластьЗаголовокОтчета.Параметры.ПериодПрописью = Формат(ДатаНачала,"ДФ=dd") + " по " + Формат(ДатаОкончания,"ДФ='dd ММММ yyyy'; ДЛФ=DD") + " года";
	ТабличныйДокументУФС.Вывести(ОбластьЗаголовокОтчета);
	ТабличныйДокументУФС.Вывести(ОбластьШапка);
	
	ИтогоПоПродажам = 0;
	
	ИтогоВознаграждениеПродажи = 0;
	ИтогоВознаграждениеВозвраты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГрадацияСтоимостиБилетовСрезПоследних.СуммаБилета,
	|	ГрадацияСтоимостиБилетовСрезПоследних.Вознаграждение
	|ИЗ
	|	РегистрСведений.ГрадацияСтоимостиБилетов.СрезПоследних(&ДатаСреза, ) КАК ГрадацияСтоимостиБилетовСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза",КонецМесяца(ДатаОкончания));
	
	ВыборкаГрадации  = Запрос.Выполнить().Выбрать();
	
	СоответсвиеГрадация = Новый Соответствие;
	Пока ВыборкаГрадации.Следующий() Цикл
		СоответсвиеГрадация.Вставить(ВыборкаГрадации.СуммаБилета,ВыборкаГрадации.Вознаграждение);	
	КонецЦикла;
	
	
	Для Каждого СтрокаДанных Из ТаблицаСДанными  Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтрокаДанных);	
		ТабличныйДокументУФС.Вывести(ОбластьСтрока);	
		ИтогоПоПродажам = ИтогоПоПродажам + Число(СтрокаДанных.Суммапродажи);	
		
		//СуммаВозн = СоответсвиеГрадация[СтрокаДанных.Суммапродажи];
		СуммаВозн = ОпределитьСуммуВознаграждения(СтрокаДанных.Суммапродажи,СтрокаДанных.Датапродажи);
		
		Если СуммаВозн = Неопределено Тогда
					Сообщить("Невозможно определить вознаграждение для билета стоимостью " + СтрокаДанных.Суммапродажи + " !Проверьте данные градациии стоимости билетов");
				Иначе
			ИтогоВознаграждениеПродажи = ИтогоВознаграждениеПродажи  + СуммаВозн;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьИтогоПродажи.Параметры.СуммаПродажи = ИтогоПоПродажам;
	
	ТабличныйДокументУФС.Вывести(ОбластьИтогоПродажи);
	ТабличныйДокументУФС.Вывести(ОбластьТекстВозвраты);
	ТабличныйДокументУФС.Вывести(ОбластьШапкаВозвраты);
	
	ИтогоПоВозвратам = 0;
	Для Каждого СтрокаВозврата Из ТаблицаСДаннымиВозвратов Цикл
		ОбластьСтрокаВозвраты = Макет.ПолучитьОбласть("СтрокаВозврат");
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаВозвраты.Параметры,СтрокаВозврата);	
		ТабличныйДокументУФС.Вывести(ОбластьСтрокаВозвраты);
		ИтогоПоВозвратам = ИтогоПоВозвратам + Число(СтрокаВозврата.Суммапродажи);
		
		//СуммаВознВозврат = СоответсвиеГрадация[СтрокаВозврата.Суммапродажи];
		СуммаВознВозврат = ОпределитьСуммуВознаграждения(СтрокаВозврата.Суммапродажи,СтрокаВозврата.Датапродажи);
		
		Если СуммаВознВозврат = Неопределено Тогда
			Сообщить("Невозможно определить вознаграждение для билета стоимостью " + СтрокаВозврата.Суммапродажи + " !Проверьте данные градациии стоимости билетов");
		Иначе
			ИтогоВознаграждениеВозвраты = ИтогоВознаграждениеВозвраты  + СуммаВознВозврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьИтогоВозвраты.Параметры.СуммаВозвратов = ИтогоПоВозвратам;
	ТабличныйДокументУФС.Вывести(ОбластьИтогоВозвраты);
	
	
	//РасчетПодвала
	ОбщаяСумма = ИтогоПоПродажам - ИтогоПоВозвратам;
	ОбщаяСуммаВознаграждения = ИтогоВознаграждениеПродажи - ИтогоВознаграждениеВозвраты;
	
	Если ДатаОкончания < Дата('20190101000000') Тогда
		СтавкаНДС = 18; 
	Иначе
		СтавкаНДС = 20;
	КонецЕсли;
	
	СуммаНдсВознаграждения = РассчитатьСуммуНДС(ОбщаяСуммаВознаграждения,Истина,СтавкаНДС);
	ОбластьПодвал.Параметры.МесяцГод = Формат(ДатаОкончания,"ДФ='MMММ yyyy'; ДЛФ=DD");
	ОбластьПодвал.Параметры.СуммаПрописью = "" + Формат(ОбщаяСумма,"ЧДЦ=2; ЧРД=-") + " ("+СформироватьПредставлениеЧислаПрописью(ОбщаяСумма)+")";
	
	ОбластьПодвал.Параметры.СуммаВознагражденияПрописью = "" + Формат(ОбщаяСуммаВознаграждения,"ЧДЦ=2; ЧРД=-") + " ("+СформироватьПредставлениеЧислаПрописью(ОбщаяСуммаВознаграждения)+")";
	ОбластьПодвал.Параметры.СтавкаНДС = СтавкаНДС;
	ОбластьПодвал.Параметры.СуммаНДСВознагражденияПрописью = "" + Формат(СуммаНдсВознаграждения,"ЧДЦ=2; ЧРД=-") + " ("+СформироватьПредставлениеЧислаПрописью(СуммаНдсВознаграждения)+")";
	
	ТабличныйДокументУФС.Вывести(ОбластьПодвал);	
	
	
	ДокументРезультат.АвтоМасштаб = истина;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ДокументРезультат.Вывести(ТабличныйДокументУФС);
	

КонецПроцедуры

функция ДанныеДляШапки(Месяц)
	
	СтруктураШапка = Новый Структура;
	
	НачалоПериода = НачалоМесяца(Месяц);
	КонецПериода = КонецМесяца(Месяц);
	
		
	ПериодПрописью = "" + Формат(НачалоПериода,"ДФ='dd ММММ yyyy'; ДЛФ=DD") + " года по " + Формат(КонецПериода,"ДФ='dd ММММ yyyy'; ДЛФ=DD") + " года";
	СтруктураШапка.Вставить("Период",ПериодПрописью);
	
	СтруктураШапка.Вставить("НомерДоговора","КОМ-2021-022");
	СтруктураШапка.Вставить("ПериодДоговора","01 мая 2021 года");
	
	Возврат СтруктураШапка;
	
КонецФункции

Процедура ВывестиТаблицуПокупок(ТабДок,Направление,ТаблицаДанных)
	
	Макет = ПолучитьМакет("МакетОтчетаАэроэкспресс");
	ОбластьШапка = Макет.ПолучитьОбласть("ЗаголовокНовый");
	ОбластьИтогоПродажи = Макет.ПолучитьОбласть("СтрокаИтого");
	ОбластьТекстПокупки = Макет.ПолучитьОбласть("ТекстПокупки");
	ОбластьТекстПокупки.Параметры.Направление = Направление;
	
	ТабДок.Вывести(ОбластьТекстПокупки);
	ТабДок.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтрокаДанных);	
		ТабДок.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьИтогоПродажи.Параметры.СуммаПродажи = ТаблицаДанных.Итог("СуммаПродажи");	
	ТабДок.Вывести(ОбластьИтогоПродажи);
	
КонецПроцедуры

Процедура ВывестиТаблицуВозвратов(ТабДок,Направление,ТаблицаДанных)
	
	Макет = ПолучитьМакет("МакетОтчетаАэроэкспресс");
	ОбластьШапка = Макет.ПолучитьОбласть("ЗаголовокВозвратыНовый");
	ОбластьИтогоВозвраты = Макет.ПолучитьОбласть("СтрокаИтогоВозвраты");
	ОбластьТекстПокупки = Макет.ПолучитьОбласть("ТекстВозвратыНовый");
	ОбластьТекстПокупки.Параметры.Направление = Направление;
	
	ТабДок.Вывести(ОбластьТекстПокупки);
	ТабДок.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаВозврат");
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтрокаДанных);
		ОбластьСтрока.Параметры.СуммаПродажи  = СтрокаДанных.СуммаВозврата;
		ОбластьСтрока.Параметры.Датавозвратаденежныхсредствпокупателю  = СтрокаДанных.ДатаВозвратаДС;

		ТабДок.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьИтогоВозвраты.Параметры.СуммаВозвратов = ТаблицаДанных.Итог("СуммаВозврата");	
	ТабДок.Вывести(ОбластьИтогоВозвраты);
	
КонецПроцедуры


Процедура СФормироватьОтчетНовый(ДокументРезультат,ВидОтчета,ДатаНачала,ДатаОкончания)
	
	ДанныеДляОтчетаПоезда = ДанныеДляОтчета(ВидОтчета,ДатаНачала,ДатаОкончания);
	ДанныеДляОтчетаАвтобусы = ДанныеДляАвтобусы(ВидОтчета,ДатаНачала,ДатаОкончания); 
	
	ДанныеДляШапкиНовые = ДанныеДляШапки(ДатаОкончания);
	
	Макет = ПолучитьМакет("МакетОтчетаАэроэкспресс");
	
	ТабличныйДокументУФС = Новый ТабличныйДокумент;
	ТабличныйДокументУФС.АвтоМасштаб = истина;
	ТабличныйДокументУФС.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокументУФС.ПолеСлева = 5;
	
	
	Если ДанныеДляОтчетаПоезда.Свойство("ТаблицаПокупок") ИЛИ ДанныеДляОтчетаПоезда.Свойство("ТаблицаВозвратов") Тогда
		
		ИтогоПоПродажам = 0;
		ИтогоПоВозн = 0;
		
		ОбластьШапка = Макет.ПолучитьОбласть("ЗаголовокОтчетаНовый");
		ОбластьШапка.Параметры.Направление = "Поезда";
		//ОбластьШапка.Параметры.НаправлениеСклонение = "Поездах";
		ОбластьШапка.Параметры.Заполнить(ДанныеДляШапкиНовые);
		
		ТабличныйДокументУФС.Вывести(ОбластьШапка);
		
		Если ДанныеДляОтчетаПоезда.Свойство("ТаблицаПокупок") Тогда
			ВывестиТаблицуПокупок(ТабличныйДокументУФС,"Поездах",ДанныеДляОтчетаПоезда.ТаблицаПокупок);
			ИтогоПоПродажам = ИтогоПоПродажам + ДанныеДляОтчетаПоезда.ТаблицаПокупок.Итог("СуммаПродажи");
			ИтогоПоВозн = ИтогоПоВозн + ДанныеДляОтчетаПоезда.ТаблицаПокупок.Итог("АгентВозн");
			
		КонецЕсли;
		
		Если ДанныеДляОтчетаПоезда.Свойство("ТаблицаВозвратов") Тогда
			ВывестиТаблицуВозвратов(ТабличныйДокументУФС,"Поездах",ДанныеДляОтчетаПоезда.ТаблицаВозвратов);
			ИтогоПоПродажам = ИтогоПоПродажам - ДанныеДляОтчетаПоезда.ТаблицаВозвратов.Итог("СуммаВозврата");
			ИтогоПоВозн = ИтогоПоВозн - ДанныеДляОтчетаПоезда.ТаблицаВозвратов.Итог("АгентВозн");
		КонецЕсли;
		
		
		ВывестиПодвалы(ТабличныйДокументУФС,ИтогоПоПродажам,ИтогоПоВозн,ДатаОкончания);
		
	КонецЕсли; 
	
	Если ДанныеДляОтчетаАвтобусы.Свойство("ТаблицаПокупок") ИЛИ ДанныеДляОтчетаАвтобусы.Свойство("ТаблицаВозвратов") Тогда
		
		ИтогоПоПродажам = 0;
		ИтогоПоВозн = 0;
		
		ОбластьШапка = Макет.ПолучитьОбласть("ЗаголовокОтчетаНовый");
		ОбластьШапка.Параметры.Направление = "Автобусы";
		//ОбластьШапка.Параметры.НаправлениеСклонение = "Поездах";
		ОбластьШапка.Параметры.Заполнить(ДанныеДляШапкиНовые);
		
		ТабличныйДокументУФС.Вывести(ОбластьШапка);
		
		Если ДанныеДляОтчетаАвтобусы.Свойство("ТаблицаПокупок") Тогда
			ВывестиТаблицуПокупок(ТабличныйДокументУФС,"Автобусах",ДанныеДляОтчетаАвтобусы.ТаблицаПокупок);
			ИтогоПоПродажам = ИтогоПоПродажам + ДанныеДляОтчетаАвтобусы.ТаблицаПокупок.Итог("СуммаПродажи");
			ИтогоПоВозн = ИтогоПоВозн + ДанныеДляОтчетаАвтобусы.ТаблицаПокупок.Итог("АгентВозн");
			
		КонецЕсли;
		
		Если ДанныеДляОтчетаАвтобусы.Свойство("ТаблицаВозвратов") Тогда
			ВывестиТаблицуВозвратов(ТабличныйДокументУФС,"Автобусах",ДанныеДляОтчетаАвтобусы.ТаблицаВозвратов);
			ИтогоПоПродажам = ИтогоПоПродажам - ДанныеДляОтчетаАвтобусы.ТаблицаВозвратов.Итог("СуммаВозврата");
			ИтогоПоВозн = ИтогоПоВозн - ДанныеДляОтчетаАвтобусы.ТаблицаВозвратов.Итог("АгентВозн");
		КонецЕсли;
		
		
		ВывестиПодвалы(ТабличныйДокументУФС,ИтогоПоПродажам,ИтогоПоВозн,ДатаОкончания);
		
	КонецЕсли; 
	 
	 ДокументРезультат.АвтоМасштаб = истина;
	 ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	 
	 ДокументРезультат.Вывести(ТабличныйДокументУФС);
	 
	 
КонецПроцедуры

Процедура ВывестиПодвалы(ТабличныйДокументУФС,ИтогоПоПродажам,ИтогоПоВозн,ДатаОкончания)
	
	Макет = ПолучитьМакет("МакетОтчетаАэроэкспресс");
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалОтчета");
	
	СуммаНдсВознаграждения = РассчитатьСуммуНДС(ИтогоПоВозн,Истина,20);
	
	ОбластьПодвал.Параметры.МесяцГод = Формат(ДатаОкончания,"ДФ='MMММ yyyy'; ДЛФ=DD");
	ОбластьПодвал.Параметры.СуммаПрописью = "" + Формат(ИтогоПоПродажам,"ЧДЦ=2; ЧРД=-") + " ("+СформироватьПредставлениеЧислаПрописью(ИтогоПоПродажам)+")";
	
	ОбластьПодвал.Параметры.СуммаВознагражденияПрописью = "" + Формат(ИтогоПоВозн,"ЧДЦ=2; ЧРД=-") + " ("+СформироватьПредставлениеЧислаПрописью(ИтогоПоВозн)+")";
	ОбластьПодвал.Параметры.СтавкаНДС = "20";
	ОбластьПодвал.Параметры.СуммаНДСВознагражденияПрописью = "" + Формат(СуммаНдсВознаграждения,"ЧДЦ=2; ЧРД=-") + " ("+СформироватьПредставлениеЧислаПрописью(СуммаНдсВознаграждения)+")";
	
	ТабличныйДокументУФС.Вывести(ОбластьПодвал);	
	
КонецПроцедуры
 

Функция ДанныеДляОтчета(ВидОтчета,ДатаНачала,ДатаОкончания)
	
	СтруктураДанных = Новый Структура;
	
	ДатаНачалаСтрока = Формат(ДатаНачала,"ДФ=yyyyMMdd");
	ДатаОкончанияСтрока = Формат(ДатаОкончания,"ДФ=yyyyMMdd");
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionTimeout  = 0;
	Connection.CommandTimeout   = 0;
	Connection.Open ("DRIVER={SQL Server};SERVER=db1;UID=fin_auditor;PWD=Cdthrf123;DATABASE=PGW2_R");
	
	ТекстЗапроса = "set transaction isolation level read uncommitted
	|SET NOCOUNT ON
	| DECLARE @begDate DATETIME = '"+ДатаНачалаСтрока+"' --Дата начала (включительно)
	| DECLARE @endDate DATETIME = '" +ДатаОкончанияСтрока+"' --Дата окончания (включительно)
	| DECLARE @ShowReturned INT = " +ВидОтчета+" -- Если 1, то показывать все, если 0, то исключить возвращённые и купленные в данном временном промежутке, если 2, то показывать только возвращённые и купленные в этот период
	| SELECT			p.ticketid 'Номер электронного билета'
	|				,t.ConfirmDate 'Дата продажи'
	|               ,t.type As ТИП     
	|				,t.amount/o.nplace 'Сумма продажи' --<Сумма транзакции>/<Кол-во мест>
	|				,t.ConfirmDate 'Дата оплаты' --Для нас совпадает с датой продажи 
	|				,'' AS '№ платёжного документа' --Пустое поле
	|				,t.amount/o.nplace 'Сумма поступившей оплаты' --<Сумма транзакции>/<Кол-во мест>
	|				,o.depttime 'Дата проезда' 
	|				,ISNULL(CASE WHEN m.idMember = 46354 THEN 'Физическое лицо' ELSE m.nameMember END,'Физическое лицо') 'Наименование контрагента'
	|				,CASE WHEN m.idMember = 46354 THEN '' ELSE mp1.value END AS 'ИНН'
	|				,CASE WHEN m.idMember = 46354 THEN '' ELSE mp2.value END AS 'КПП'
	|				,CASE WHEN m.idMember = 46354 THEN '' ELSE mp3.value END AS 'Юридический адрес'
	|				,ISNULL(CASE WHEN m.idparent_member = 46354 THEN 'Физическое лицо' ELSE  m2.nameMember END,'Физическое лицо') 'Наименование субагента'
	|				,CASE WHEN m.idparent_member = 46354 THEN '' ELSE mp21.value END AS 'ИНН Субагента'
	|				,CASE WHEN m.idparent_member = 46354 THEN '' ELSE mp22.value END AS 'КПП Субагента'
	|				,CASE WHEN m.idparent_member = 46354 THEN '' ELSE mp23.value END AS 'Юридический адрес Субагента'
	|				,o.ticketclass as Класс
	|               ,t2.ConfirmDate as ДатаПродажиВозврата 
	|               ,case when t.type = 1 then convert(date, t.ConfirmDate) else convert(date, t2.ConfirmDate)end as ДатаДляТарифа 
	|				FROM	Trans t (NOLOCK) JOIN 
	|						orRzhdAE o (NOLOCK) ON t.idtrans = o.idtrans left join Trans t2 (NOLOCK) on (t.prevTr = t2.idtrans and t.type =14)  JOIN
	|						AeroPassenger p (NOLOCK) ON p.TransId = t.idtrans JOIN
	|						members m (NOLOCK) ON t.idPayer = m.idMember LEFT JOIN
	|						ufs_MemParams mp1 (NOLOCK) ON m.idMember=mp1.idmember AND mp1.type = 8 LEFT JOIN
	|						ufs_MemParams mp2 (NOLOCK) ON m.idMember=mp2.idmember AND mp2.type = 9 LEFT JOIN
	|						ufs_MemParams mp3 (NOLOCK) ON m.idMember=mp3.idmember AND mp3.type = 1 LEFT JOIN
	|				pos (NOLOCK) ON pos.idpos = t.idPOS AND pos.idmember NOT IN (m.idMember,46354) LEFT JOIN		
	|				members m2 (NOLOCK) ON m2.idMember = pos.idmember OR (m.idparent_member NOT IN (0, 46354) 
	|				AND m.idparent_member = m2.idMember) LEFT JOIN
	|				ufs_MemParams mp21 (NOLOCK) ON m2.idMember=mp21.idmember AND mp21.type = 8 LEFT JOIN
	|				ufs_MemParams mp22 (NOLOCK) ON m2.idMember=mp22.idmember AND mp22.type = 9 LEFT JOIN
	|				ufs_MemParams mp23 (NOLOCK) ON m2.idMember=mp23.idmember AND mp23.type = 1
	|				WHERE --Условия
	|				t.status = 0 --транзакция успешная
	|				AND t.test = 0 --не тестовая
	|				AND t.ConfirmDate>@begDate --Дата подтверждения с 2015-03-01
	|				AND t.ConfirmDate<DATEADD(dd,1,@endDate) --Дата подтверждения до 2015-03-11
	|				AND 1 = 
	|				CASE @ShowReturned WHEN 1 THEN 1
	|				WHEN 0 THEN (SELECT COUNT(*) FROM Trans t (NOLOCK) JOIN AeroPassenger a (NOLOCK) ON t.idtrans = a.TransId 
	|				AND a.ticketid=p.ticketid AND
	|				t.status = 0 --транзакция успешная
	|				AND t.test = 0 --не тестовая
	|				AND t.ConfirmDate>@begDate 
	|				AND t.ConfirmDate<DATEADD(dd,1,@endDate) )
	|				WHEN 2 THEN (SELECT COUNT(*)-1 FROM Trans t (NOLOCK) JOIN AeroPassenger a (NOLOCK) ON t.idtrans = a.TransId 
	|				AND a.ticketid=p.ticketid AND
	|				t.status = 0 --транзакция успешная
	|				AND t.test = 0 --не тестовая
	|				AND t.ConfirmDate>@begDate 
	|				AND t.ConfirmDate<DATEADD(dd,1,@endDate) ) END
	| ORDER BY 2";
	
	RecordSet = Connection.Execute(ТекстЗапроса);
	
	ТаблицаПокупок = ПодготовитьПустуюТаблицуДанных();
	ТаблицаВозвратов  = ПодготовитьПустуюТаблицуДанныхВозвратов();
	
	КоличествоБилетов = 0;
	
	Пока НЕ RecordSet.EOF() Цикл
		
		ТипТранзакции = Число(RecordSet.Fields("ТИП").Value);
		
		Если ТипТранзакции = 1 Тогда
			НоваяСтрока = ТаблицаПокупок.Добавить();
			НоваяСтрока.СуммаПродажи = RecordSet.Fields("Сумма продажи").Value;
			НоваяСтрока.ДатаОплаты = RecordSet.Fields("Дата оплаты").Value;
			НоваяСтрока.СуммаПоступившейОплаты = RecordSet.Fields("Сумма поступившей оплаты").Value;
            НоваяСтрока.ДатаПроезда = RecordSet.Fields("Дата проезда").Value;
            НоваяСтрока.НомерПлатёжногоДокумента = RecordSet.Fields("№ платёжного документа").Value;
            НоваяСтрока.ДатаПродажи = RecordSet.Fields("Дата Продажи").Value;

		Иначе
			НоваяСтрока = ТаблицаВозвратов.Добавить();
			НоваяСтрока.СуммаВозврата = RecordSet.Fields("Сумма продажи").Value;
			НоваяСтрока.ДатаВозвратаДС = RecordSet.Fields("Дата продажи").Value;
			НоваяСтрока.ДатаВозврата = RecordSet.Fields("Дата продажи").Value; 
			НоваяСтрока.ДатаПродажи = RecordSet.Fields("ДатаПродажиВозврата").Value;
		КонецЕсли;
		НоваяСтрока.Класс = Число(RecordSet.Fields("Класс").Value);
		НоваяСтрока.НомерЭлектронногоБилета = RecordSet.Fields("Номер электронного билета").Value;
			
		НоваяСтрока.НаименованиеКонтрагента = RecordSet.Fields("Наименование контрагента").Value;
		Если СтрНайти(НоваяСтрока.НаименованиеКонтрагента,"Сбербанк Спасибо") > 0 Тогда
			НоваяСтрока.НаименованиеКонтрагента  = "Физическое лицо";
		КонецЕсли;
		
		Если НоваяСтрока.НаименованиеКонтрагента  = "Физическое лицо" Тогда
			НоваяСтрока.ИННКонтрагента = "";
			НоваяСтрока.КППКонтрагента = "";
			НоваяСтрока.ЮридическийАдресКонтрагента = "";
		Иначе	
			НоваяСтрока.ИННКонтрагента = RecordSet.Fields("ИНН").Value;
			НоваяСтрока.КППКонтрагента = RecordSet.Fields("КПП").Value;
			НоваяСтрока.ЮридическийАдресКонтрагента = RecordSet.Fields("Юридический адрес").Value;
		КонецЕсли;
		
		НоваяСтрока.НаименованиеСубагента = RecordSet.Fields("Наименование субагента").Value;
		Если СтрНайти(НоваяСтрока.НаименованиеСубагента,"Сбербанк Спасибо") > 0 Тогда
			НоваяСтрока.НаименованиеСубагента  = "Физическое лицо";
		КонецЕсли;
		Если НоваяСтрока.НаименованиеСубагента =  "Физическое лицо" Тогда
			НоваяСтрока.ИННсубагента = "";
			НоваяСтрока.КППсубагента = "";
			НоваяСтрока.ЮридическийАдресСубагента = "";
		Иначе	
			НоваяСтрока.ИННсубагента = RecordSet.Fields("ИНН Субагента").Value;
			НоваяСтрока.КППсубагента = RecordSet.Fields("КПП Субагента").Value;
			НоваяСтрока.ЮридическийАдресСубагента = RecordSet.Fields("Юридический адрес Субагента").Value;
		КонецЕсли;
		
		ДатаДляПреобразования = RecordSet.Fields("ДатаДляТарифа").Value;
		ДатаДляПреобразования = СтрЗаменить(ДатаДляПреобразования,"-","");
		ДатаВТЗ = Дата(ДатаДляПреобразования);

		НоваяСтрока.ДатаДляТарифа = ДатаВТЗ;		
		RecordSet.MoveNext();

	КонецЦикла;    
	
	RecordSet.Close();
	Connection.Close();
	
   КоличествоБилетов = ТаблицаПокупок.Количество() - ТаблицаВозвратов.Количество();
   
	Если ТаблицаПокупок.Количество() > 0 Тогда	
		ТаблицаПокупок = РассчитатьАгентскоеВознаграждение(ТаблицаПокупок);
		СтруктураДанных.Вставить("ТаблицаПокупок",ТаблицаПокупок);
	КонецЕсли;
	
	Если ТаблицаВозвратов.Количество()> 0 Тогда
		ТаблицаВозвратов = РассчитатьАгентскоеВознаграждениеВозвраты(ТаблицаВозвратов);
		СтруктураДанных.Вставить("ТаблицаВозвратов",ТаблицаВозвратов);	
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
	
КонецФункции

Функция ОпределитьАгентскоеВознаграждение(ТаблицаДанных,КоличествоБилетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТЗ.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ТЗ.ДатаПродажи КАК ДатаПродажи,
	                |	ТЗ.СуммаПродажи КАК СуммаПродажи,
	                |	ТЗ.ДатаОплаты КАК ДатаОплаты,
	                |	ТЗ.НомерПлатёжногоДокумента КАК НомерПлатёжногоДокумента,
	                |	ТЗ.ДатаПроезда КАК ДатаПроезда,
				    |	ТЗ.СуммаПоступившейОплаты КАК СуммаПоступившейОплаты,	
	                |	ТЗ.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ТЗ.ИННКонтрагента КАК ИННКонтрагента,
	                |	ТЗ.КППКонтрагента КАК КППКонтрагента,
	                |	ТЗ.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ТЗ.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ТЗ.ИННсубагента КАК ИННсубагента,
	                |	ТЗ.КППсубагента КАК КППсубагента,
	                |	ТЗ.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ТЗ.АгентВозн КАК АгентВозн,
	                |	ТЗ.Класс КАК Класс
	                |ПОМЕСТИТЬ ДанныеБезВозн
	                |ИЗ
	                |	&ТЗ КАК ТЗ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДанныеБезВозн.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ДанныеБезВозн.ДатаПродажи КАК ДатаПродажи,
	                |	ДанныеБезВозн.СуммаПродажи КАК СуммаПродажи,
	                |	ДанныеБезВозн.ДатаОплаты КАК ДатаОплаты,
	                |	ДанныеБезВозн.НомерПлатёжногоДокумента КАК НомерПлатёжногоДокумента,
					|	ДанныеБезВозн.СуммаПоступившейОплаты КАК СуммаПоступившейОплаты,
	                |	ДанныеБезВозн.ДатаПроезда КАК ДатаПроезда,
	                |	ДанныеБезВозн.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ДанныеБезВозн.ИННКонтрагента КАК ИННКонтрагента,
	                |	ДанныеБезВозн.КППКонтрагента КАК КППКонтрагента,
	                |	ДанныеБезВозн.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ДанныеБезВозн.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ДанныеБезВозн.ИННсубагента КАК ИННсубагента,
	                |	ДанныеБезВозн.КППсубагента КАК КППсубагента,
	                |	ДанныеБезВозн.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ДанныеБезВозн.АгентВозн КАК АгентВозн,
	                |	ДанныеБезВозн.Класс КАК Класс,
	                |	ЕСТЬNULL(ТарифыАэроэкспрессПоездаГрадация.Вознаграждение, 0) КАК Вознаграждение
	                |ПОМЕСТИТЬ НеАгригированная
	                |ИЗ
	                |	ДанныеБезВозн КАК ДанныеБезВозн
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТарифыАэроэкспрессПоезда.Градация КАК ТарифыАэроэкспрессПоездаГрадация
	                |		ПО ДанныеБезВозн.Класс = ТарифыАэроэкспрессПоездаГрадация.Ссылка.Класс
	                |			И (ТарифыАэроэкспрессПоездаГрадация.Ссылка.Действующий)
	                |ГДЕ
	                |	ТарифыАэроэкспрессПоездаГрадация.КоличествоБилетов <= &КоличествоБилетовПроданных
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	НеАгригированная.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	НеАгригированная.ДатаПродажи КАК ДатаПродажи,
	                |	НеАгригированная.СуммаПродажи КАК СуммаПродажи,
	                |	НеАгригированная.ДатаОплаты КАК ДатаОплаты,
	                |	НеАгригированная.НомерПлатёжногоДокумента КАК НомерПлатёжногоДокумента,
				    |	НеАгригированная.СуммаПоступившейОплаты КАК СуммаПоступившейОплаты,
	                |	НеАгригированная.ДатаПроезда КАК ДатаПроезда,
	                |	НеАгригированная.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	НеАгригированная.ИННКонтрагента КАК ИННКонтрагента,
	                |	НеАгригированная.КППКонтрагента КАК КППКонтрагента,
	                |	НеАгригированная.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	НеАгригированная.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	НеАгригированная.ИННсубагента КАК ИННсубагента,
	                |	НеАгригированная.КППсубагента КАК КППсубагента,
	                |	НеАгригированная.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	НеАгригированная.Класс КАК Класс,
	                |	МАКСИМУМ(НеАгригированная.Вознаграждение) КАК АгентВозн
	                |ИЗ
	                |	НеАгригированная КАК НеАгригированная
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	НеАгригированная.НомерЭлектронногоБилета,
	                |	НеАгригированная.ДатаПродажи,
	                |	НеАгригированная.СуммаПродажи,
	                |	НеАгригированная.ДатаОплаты,
					|	НеАгригированная.СуммаПоступившейОплаты,
	                |	НеАгригированная.НомерПлатёжногоДокумента,
	                |	НеАгригированная.ДатаПроезда,
	                |	НеАгригированная.НаименованиеКонтрагента,
	                |	НеАгригированная.ИННКонтрагента,
	                |	НеАгригированная.КППКонтрагента,
	                |	НеАгригированная.ЮридическийАдресКонтрагента,
	                |	НеАгригированная.НаименованиеСубагента,
	                |	НеАгригированная.ИННсубагента,
	                |	НеАгригированная.КППсубагента,
	                |	НеАгригированная.ЮридическийАдресСубагента,
	                |	НеАгригированная.Класс";
	
	Запрос.УстановитьПараметр("ТЗ",ТаблицаДанных);
	Запрос.УстановитьПараметр("КоличествоБилетовПроданных",КоличествоБилетов);
	Результат = Запрос.Выполнить().Выгрузить();
		
	Возврат Результат;
		
КонецФункции

Функция ОпределитьАгентскоеВознаграждениеВозвраты(ТаблицаДанных,КоличествоБилетов)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТЗ.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ТЗ.ДатаПродажи КАК ДатаПродажи,
	                |	ТЗ.СуммаВозврата КАК СуммаВозврата,
	                |	ТЗ.ДатаВозврата КАК ДатаВозврата,
	                |	ТЗ.ДатаВозвратаДС КАК ДатаВозвратаДС,
	                |	ТЗ.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ТЗ.ИННКонтрагента КАК ИННКонтрагента,
	                |	ТЗ.КППКонтрагента КАК КППКонтрагента,
	                |	ТЗ.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ТЗ.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ТЗ.ИННсубагента КАК ИННсубагента,
	                |	ТЗ.КППсубагента КАК КППсубагента,
	                |	ТЗ.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ТЗ.АгентВозн КАК АгентВозн,
	                |	ТЗ.Класс КАК Класс
	                |ПОМЕСТИТЬ ДанныеБезВозн
	                |ИЗ
	                |	&ТЗ КАК ТЗ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДанныеБезВозн.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ДанныеБезВозн.ДатаПродажи КАК ДатаПродажи,
	                |	ДанныеБезВозн.СуммаВозврата КАК СуммаВозврата,
	                |	ДанныеБезВозн.ДатаВозврата КАК ДатаВозврата,
	                |	ДанныеБезВозн.ДатаВозвратаДС КАК ДатаВозвратаДС,
	                |	ДанныеБезВозн.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ДанныеБезВозн.ИННКонтрагента КАК ИННКонтрагента,
	                |	ДанныеБезВозн.КППКонтрагента КАК КППКонтрагента,
	                |	ДанныеБезВозн.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ДанныеБезВозн.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ДанныеБезВозн.ИННсубагента КАК ИННсубагента,
	                |	ДанныеБезВозн.КППсубагента КАК КППсубагента,
	                |	ДанныеБезВозн.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ДанныеБезВозн.АгентВозн КАК АгентВозн,
	                |	ДанныеБезВозн.Класс КАК Класс,
	                |	ЕСТЬNULL(ТарифыАэроэкспрессПоездаГрадация.Вознаграждение, 0) КАК Вознаграждение
	                |ПОМЕСТИТЬ НеАгригированная
	                |ИЗ
	                |	ДанныеБезВозн КАК ДанныеБезВозн
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТарифыАэроэкспрессПоезда.Градация КАК ТарифыАэроэкспрессПоездаГрадация
	                |		ПО ДанныеБезВозн.Класс = ТарифыАэроэкспрессПоездаГрадация.Ссылка.Класс
	                |			И (ТарифыАэроэкспрессПоездаГрадация.Ссылка.Действующий)
	                |ГДЕ
	                |	ТарифыАэроэкспрессПоездаГрадация.КоличествоБилетов <= &КоличествоБилетовПроданных
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	НеАгригированная.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	НеАгригированная.ДатаПродажи КАК ДатаПродажи,
	                |	НеАгригированная.СуммаВозврата КАК СуммаВозврата,
	                |	НеАгригированная.ДатаВозврата КАК ДатаВозврата,
	                |	НеАгригированная.ДатаВозвратаДС КАК ДатаВозвратаДС ,
	                |	НеАгригированная.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	НеАгригированная.ИННКонтрагента КАК ИННКонтрагента,
	                |	НеАгригированная.КППКонтрагента КАК КППКонтрагента,
	                |	НеАгригированная.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	НеАгригированная.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	НеАгригированная.ИННсубагента КАК ИННсубагента,
	                |	НеАгригированная.КППсубагента КАК КППсубагента,
	                |	НеАгригированная.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	НеАгригированная.Класс КАК Класс,
					|	НеАгригированная.АгентВозн КАК АгентВозн,
	                |	МАКСИМУМ(НеАгригированная.Вознаграждение) КАК АгентВознРасчет
	                |ИЗ
	                |	НеАгригированная КАК НеАгригированная
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	НеАгригированная.НомерЭлектронногоБилета,
	                |	НеАгригированная.ДатаПродажи,
	                |	НеАгригированная.СуммаВозврата,
	                |	НеАгригированная.ДатаВозврата,
	                |	НеАгригированная.ДатаВозвратаДС,
	                |	НеАгригированная.НаименованиеКонтрагента,
	                |	НеАгригированная.ИННКонтрагента,
	                |	НеАгригированная.КППКонтрагента,
	                |	НеАгригированная.ЮридическийАдресКонтрагента,
	                |	НеАгригированная.НаименованиеСубагента,
	                |	НеАгригированная.ИННсубагента,
	                |	НеАгригированная.КППсубагента,
	                |	НеАгригированная.ЮридическийАдресСубагента,
	                |	НеАгригированная.Класс,
					|   НеАгригированная.АгентВозн";
	
	Запрос.УстановитьПараметр("ТЗ",ТаблицаДанных);
	Запрос.УстановитьПараметр("КоличествоБилетовПроданных",КоличествоБилетов);
		
	Результат = Запрос.Выполнить().Выгрузить();
		
	Возврат Результат;
		
КонецФункции

Функция РассчитатьАгентскоеВознаграждение(ТаблицаДанных)
		
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ТЗ.ДатаДляТарифа КАК ДатаДляТарифа
	|ПОМЕСТИТЬ ДатыТарифа
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДатыТарифа.ДатаДляТарифа, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	ДатыТарифа КАК ДатыТарифа
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДатыТарифа.ДатаДляТарифа, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("ТЗ",ТаблицаДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТЗСБилетами = Новый ТаблицаЗначений;
	ТЗСБилетами.Колонки.Добавить("Месяц",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"Месяц");
	ТЗСБилетами.Колонки.Добавить("КоличествоБилетовВМесяце",ОбщегоНазначения.ОписаниеТипаЧисло(15,0,ДопустимыйЗнак.Любой),"КоличествоБилетовВМесяце");
	
	
	Пока Выборка.Следующий() Цикл
		КоличествоБилетовВМесяце = АэроЭкспрессРасчеты.ПодсчитатьКоличествоБилетов(НачалоМесяца(Выборка.Месяц),КонецМесяца(Выборка.Месяц));
		НоваяСтрокаТз = ТЗСБилетами.Добавить();
		НоваяСтрокаТз.Месяц = Выборка.Месяц;
		НоваяСтрокаТз.КоличествоБилетовВМесяце = КоличествоБилетовВМесяце;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТЗ.Месяц КАК Месяц,
	                |	ТЗ.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце
	                |ПОМЕСТИТЬ КоличествоБилетовВмесяцеДляТарифа
	                |ИЗ
	                |	&ТЗ КАК ТЗ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТЗ.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ТЗ.ДатаПродажи КАК ДатаПродажи,
	                |	ТЗ.СуммаПродажи КАК СуммаПродажи,
	                |	ТЗ.ДатаОплаты КАК ДатаОплаты,
	                |	ТЗ.НомерПлатёжногоДокумента КАК НомерПлатёжногоДокумента,
	                |	ТЗ.ДатаПроезда КАК ДатаПроезда,
	                |	ТЗ.СуммаПоступившейОплаты КАК СуммаПоступившейОплаты,
	                |	ТЗ.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ТЗ.ИННКонтрагента КАК ИННКонтрагента,
	                |	ТЗ.КППКонтрагента КАК КППКонтрагента,
	                |	ТЗ.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ТЗ.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ТЗ.ИННсубагента КАК ИННсубагента,
	                |	ТЗ.КППсубагента КАК КППсубагента,
	                |	ТЗ.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ТЗ.АгентВозн КАК АгентВозн,
	                |	ТЗ.Класс КАК Класс,
	                |	ТЗ.ДатаДляТарифа КАК ДатаДляТарифа
	                |ПОМЕСТИТЬ ДанныеБезВозн
	                |ИЗ
	                |	&ДанныеПоЧислам КАК ТЗ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДанныеБезВозн.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ДанныеБезВозн.ДатаПродажи КАК ДатаПродажи,
	                |	ДанныеБезВозн.СуммаПродажи КАК СуммаПродажи,
	                |	ДанныеБезВозн.ДатаОплаты КАК ДатаОплаты,
	                |	ДанныеБезВозн.НомерПлатёжногоДокумента КАК НомерПлатёжногоДокумента,
	                |	ДанныеБезВозн.СуммаПоступившейОплаты КАК СуммаПоступившейОплаты,
	                |	ДанныеБезВозн.ДатаПроезда КАК ДатаПроезда,
	                |	ДанныеБезВозн.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ДанныеБезВозн.ИННКонтрагента КАК ИННКонтрагента,
	                |	ДанныеБезВозн.КППКонтрагента КАК КППКонтрагента,
	                |	ДанныеБезВозн.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ДанныеБезВозн.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ДанныеБезВозн.ИННсубагента КАК ИННсубагента,
	                |	ДанныеБезВозн.КППсубагента КАК КППсубагента,
	                |	ДанныеБезВозн.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ДанныеБезВозн.АгентВозн КАК АгентВозн,
	                |	ДанныеБезВозн.Класс КАК Класс,
	                |	КоличествоБилетовВмесяцеДляТарифа.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце,
	                |	КоличествоБилетовВмесяцеДляТарифа.Месяц КАК Месяц,
	                |	ДанныеБезВозн.ДатаДляТарифа КАК ДатаДляТарифа
	                |ПОМЕСТИТЬ НеАгригированная
	                |ИЗ
	                |	ДанныеБезВозн КАК ДанныеБезВозн
	                |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБилетовВмесяцеДляТарифа КАК КоличествоБилетовВмесяцеДляТарифа
	                |		ПО (НАЧАЛОПЕРИОДА(ДанныеБезВозн.ДатаДляТарифа, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КоличествоБилетовВмесяцеДляТарифа.Месяц, МЕСЯЦ))
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	НеАгригированная.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	НеАгригированная.ДатаПродажи КАК ДатаПродажи,
	                |	НеАгригированная.СуммаПродажи КАК СуммаПродажи,
	                |	НеАгригированная.ДатаОплаты КАК ДатаОплаты,
	                |	НеАгригированная.НомерПлатёжногоДокумента КАК НомерПлатёжногоДокумента,
	                |	НеАгригированная.СуммаПоступившейОплаты КАК СуммаПоступившейОплаты,
	                |	НеАгригированная.ДатаПроезда КАК ДатаПроезда,
	                |	НеАгригированная.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	НеАгригированная.ИННКонтрагента КАК ИННКонтрагента,
	                |	НеАгригированная.КППКонтрагента КАК КППКонтрагента,
	                |	НеАгригированная.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	НеАгригированная.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	НеАгригированная.ИННсубагента КАК ИННсубагента,
	                |	НеАгригированная.КППсубагента КАК КППсубагента,
	                |	НеАгригированная.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	НеАгригированная.АгентВозн КАК АгентВозн,
	                |	НеАгригированная.Класс КАК Класс,
	                |	НеАгригированная.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце,
	                |	НеАгригированная.Месяц КАК Месяц,
	                |	МАКСИМУМ(ПериодыТарифовАэроэкспресс.Период) КАК Период,
	                |	НеАгригированная.ДатаДляТарифа КАК ДатаДляТарифа
	                |ПОМЕСТИТЬ ПериодТарифа
	                |ИЗ
	                |	НеАгригированная КАК НеАгригированная
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыТарифовАэроэкспресс КАК ПериодыТарифовАэроэкспресс
	                |		ПО НеАгригированная.ДатаДляТарифа >= ПериодыТарифовАэроэкспресс.Период
	                |			И НеАгригированная.Класс = ПериодыТарифовАэроэкспресс.Тариф.Класс
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	НеАгригированная.ДатаДляТарифа,
	                |	НеАгригированная.Месяц,
	                |	НеАгригированная.КоличествоБилетовВМесяце,
	                |	НеАгригированная.Класс,
	                |	НеАгригированная.АгентВозн,
	                |	НеАгригированная.ЮридическийАдресСубагента,
	                |	НеАгригированная.КППсубагента,
	                |	НеАгригированная.ИННсубагента,
	                |	НеАгригированная.НаименованиеСубагента,
	                |	НеАгригированная.ЮридическийАдресКонтрагента,
	                |	НеАгригированная.КППКонтрагента,
	                |	НеАгригированная.ИННКонтрагента,
	                |	НеАгригированная.НаименованиеКонтрагента,
	                |	НеАгригированная.ДатаПроезда,
	                |	НеАгригированная.СуммаПоступившейОплаты,
	                |	НеАгригированная.НомерПлатёжногоДокумента,
	                |	НеАгригированная.ДатаОплаты,
	                |	НеАгригированная.СуммаПродажи,
	                |	НеАгригированная.ДатаПродажи,
	                |	НеАгригированная.НомерЭлектронногоБилета
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПериодТарифа.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ПериодТарифа.ДатаПродажи КАК ДатаПродажи,
	                |	ПериодТарифа.СуммаПродажи КАК СуммаПродажи,
	                |	ПериодТарифа.ДатаОплаты КАК ДатаОплаты,
	                |	ПериодТарифа.НомерПлатёжногоДокумента КАК НомерПлатёжногоДокумента,
	                |	ПериодТарифа.СуммаПоступившейОплаты КАК СуммаПоступившейОплаты,
	                |	ПериодТарифа.ДатаПроезда КАК ДатаПроезда,
	                |	ПериодТарифа.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ПериодТарифа.ИННКонтрагента КАК ИННКонтрагента,
	                |	ПериодТарифа.КППКонтрагента КАК КППКонтрагента,
	                |	ПериодТарифа.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ПериодТарифа.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ПериодТарифа.ИННсубагента КАК ИННсубагента,
	                |	ПериодТарифа.КППсубагента КАК КППсубагента,
	                |	ПериодТарифа.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ПериодТарифа.АгентВозн КАК АгентВозн,
	                |	ПериодТарифа.Класс КАК Класс,
	                |	ПериодТарифа.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце,
	                |	ПериодТарифа.Месяц КАК Месяц,
	                |	ПериодТарифа.Период КАК Период,
	                |	ПериодТарифа.ДатаДляТарифа КАК ДатаДляТарифа,
	                |	ПериодыТарифовАэроэкспресс.Тариф КАК Тариф
	                |ПОМЕСТИТЬ ТарифИПериод
	                |ИЗ
	                |	ПериодТарифа КАК ПериодТарифа
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыТарифовАэроэкспресс КАК ПериодыТарифовАэроэкспресс
	                |		ПО ПериодТарифа.Период = ПериодыТарифовАэроэкспресс.Период
	                |			И ПериодТарифа.Класс = ПериодыТарифовАэроэкспресс.Тариф.Класс
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТарифИПериод.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ТарифИПериод.ДатаПродажи КАК ДатаПродажи,
	                |	ТарифИПериод.СуммаПродажи КАК СуммаПродажи,
	                |	ТарифИПериод.ДатаОплаты КАК ДатаОплаты,
	                |	ТарифИПериод.НомерПлатёжногоДокумента КАК НомерПлатёжногоДокумента,
	                |	ТарифИПериод.СуммаПоступившейОплаты КАК СуммаПоступившейОплаты,
	                |	ТарифИПериод.ДатаПроезда КАК ДатаПроезда,
	                |	ТарифИПериод.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ТарифИПериод.ИННКонтрагента КАК ИННКонтрагента,
	                |	ТарифИПериод.КППКонтрагента КАК КППКонтрагента,
	                |	ТарифИПериод.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ТарифИПериод.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ТарифИПериод.ИННсубагента КАК ИННсубагента,
	                |	ТарифИПериод.КППсубагента КАК КППсубагента,
	                |	ТарифИПериод.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ТарифИПериод.Класс КАК Класс,
	                |	ТарифИПериод.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце,
	                |	ТарифИПериод.Месяц КАК Месяц,
	                |	ТарифИПериод.Период КАК Период,
	                |	ТарифИПериод.ДатаДляТарифа КАК ДатаДляТарифа,
	                |	ТарифИПериод.Тариф КАК Тариф,
	                |	МАКСИМУМ(ЕСТЬNULL(ТарифыАэроэкспрессПоездаГрадация.Вознаграждение, 0)) КАК АгентВозн
	                |ИЗ
	                |	ТарифИПериод КАК ТарифИПериод
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТарифыАэроэкспрессПоезда.Градация КАК ТарифыАэроэкспрессПоездаГрадация
	                |		ПО ТарифИПериод.Тариф = ТарифыАэроэкспрессПоездаГрадация.Ссылка
	                |			И ТарифИПериод.КоличествоБилетовВМесяце >= ТарифыАэроэкспрессПоездаГрадация.КоличествоБилетов
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ТарифИПериод.Тариф,
	                |	ТарифИПериод.Период,
	                |	ТарифИПериод.АгентВозн,
	                |	ТарифИПериод.ЮридическийАдресСубагента,
	                |	ТарифИПериод.КППсубагента,
	                |	ТарифИПериод.ИННсубагента,
	                |	ТарифИПериод.НаименованиеСубагента,
	                |	ТарифИПериод.ЮридическийАдресКонтрагента,
	                |	ТарифИПериод.КППКонтрагента,
	                |	ТарифИПериод.ИННКонтрагента,
	                |	ТарифИПериод.НаименованиеКонтрагента,
	                |	ТарифИПериод.ДатаПроезда,
	                |	ТарифИПериод.СуммаПоступившейОплаты,
	                |	ТарифИПериод.НомерПлатёжногоДокумента,
	                |	ТарифИПериод.ДатаОплаты,
	                |	ТарифИПериод.СуммаПродажи,
	                |	ТарифИПериод.ДатаПродажи,
	                |	ТарифИПериод.НомерЭлектронногоБилета,
	                |	ТарифИПериод.КоличествоБилетовВМесяце,
	                |	ТарифИПериод.Класс,
	                |	ТарифИПериод.Месяц,
	                |	ТарифИПериод.ДатаДляТарифа";
	
	Запрос.УстановитьПараметр("ТЗ",ТЗСБилетами);
	Запрос.УстановитьПараметр("ДанныеПоЧислам",ТаблицаДанных);
	
	Результат = Запрос.Выполнить().Выгрузить();
Возврат Результат;
	
КонецФункции

Функция РассчитатьАгентскоеВознаграждениеВозвраты(ТаблицаДанных)
		
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ТЗ.ДатаДляТарифа КАК ДатаДляТарифа
	|ПОМЕСТИТЬ ДатыТарифа
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДатыТарифа.ДатаДляТарифа, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	ДатыТарифа КАК ДатыТарифа
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДатыТарифа.ДатаДляТарифа, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("ТЗ",ТаблицаДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТЗСБилетами = Новый ТаблицаЗначений;
	ТЗСБилетами.Колонки.Добавить("Месяц",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"Месяц");
	ТЗСБилетами.Колонки.Добавить("КоличествоБилетовВМесяце",ОбщегоНазначения.ОписаниеТипаЧисло(15,0,ДопустимыйЗнак.Любой),"КоличествоБилетовВМесяце");
	
	
	Пока Выборка.Следующий() Цикл
		КоличествоБилетовВМесяце = АэроЭкспрессРасчеты.ПодсчитатьКоличествоБилетов(НачалоМесяца(Выборка.Месяц),КонецМесяца(Выборка.Месяц));
		НоваяСтрокаТз = ТЗСБилетами.Добавить();
		НоваяСтрокаТз.Месяц = Выборка.Месяц;
		НоваяСтрокаТз.КоличествоБилетовВМесяце = КоличествоБилетовВМесяце;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТЗ.Месяц КАК Месяц,
	                |	ТЗ.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце
	                |ПОМЕСТИТЬ КоличествоБилетовВмесяцеДляТарифа
	                |ИЗ
	                |	&ТЗ КАК ТЗ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТЗ.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ТЗ.ДатаПродажи КАК ДатаПродажи,
	                |	ТЗ.СуммаВозврата КАК СуммаВозврата,
	                |	ТЗ.ДатаВозврата КАК ДатаВозврата,
	                |	ТЗ.ДатаВозвратаДС КАК ДатаВозвратаДС,
	                |	ТЗ.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ТЗ.ИННКонтрагента КАК ИННКонтрагента,
	                |	ТЗ.КППКонтрагента КАК КППКонтрагента,
	                |	ТЗ.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ТЗ.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ТЗ.ИННсубагента КАК ИННсубагента,
	                |	ТЗ.КППсубагента КАК КППсубагента,
	                |	ТЗ.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ТЗ.АгентВозн КАК АгентВозн,
	                |	ТЗ.Класс КАК Класс,
	                |	ТЗ.ДатаДляТарифа КАК ДатаДляТарифа
	                |ПОМЕСТИТЬ ДанныеБезВозн
	                |ИЗ
	                |	&ДанныеПоЧислам КАК ТЗ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДанныеБезВозн.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ДанныеБезВозн.ДатаПродажи КАК ДатаПродажи,
	                |	ДанныеБезВозн.СуммаВозврата КАК СуммаВозврата,
	                |	ДанныеБезВозн.ДатаВозврата КАК ДатаВозврата,
	                |	ДанныеБезВозн.ДатаВозвратаДС КАК ДатаВозвратаДС,
	                |	ДанныеБезВозн.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ДанныеБезВозн.ИННКонтрагента КАК ИННКонтрагента,
	                |	ДанныеБезВозн.КППКонтрагента КАК КППКонтрагента,
	                |	ДанныеБезВозн.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ДанныеБезВозн.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ДанныеБезВозн.ИННсубагента КАК ИННсубагента,
	                |	ДанныеБезВозн.КППсубагента КАК КППсубагента,
	                |	ДанныеБезВозн.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ДанныеБезВозн.АгентВозн КАК АгентВозн,
	                |	ДанныеБезВозн.Класс КАК Класс,
	                |	КоличествоБилетовВмесяцеДляТарифа.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце,
	                |	КоличествоБилетовВмесяцеДляТарифа.Месяц КАК Месяц,
	                |	ДанныеБезВозн.ДатаДляТарифа КАК ДатаДляТарифа
	                |ПОМЕСТИТЬ НеАгригированная
	                |ИЗ
	                |	ДанныеБезВозн КАК ДанныеБезВозн
	                |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБилетовВмесяцеДляТарифа КАК КоличествоБилетовВмесяцеДляТарифа
	                |		ПО (НАЧАЛОПЕРИОДА(ДанныеБезВозн.ДатаДляТарифа, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КоличествоБилетовВмесяцеДляТарифа.Месяц, МЕСЯЦ))
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	НеАгригированная.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	НеАгригированная.ДатаПродажи КАК ДатаПродажи,
	                |	НеАгригированная.СуммаВозврата КАК СуммаВозврата,
	                |	НеАгригированная.ДатаВозврата КАК ДатаВозврата,
	                |	НеАгригированная.ДатаВозвратаДС КАК ДатаВозвратаДС,
	                |	НеАгригированная.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	НеАгригированная.ИННКонтрагента КАК ИННКонтрагента,
	                |	НеАгригированная.КППКонтрагента КАК КППКонтрагента,
	                |	НеАгригированная.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	НеАгригированная.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	НеАгригированная.ИННсубагента КАК ИННсубагента,
	                |	НеАгригированная.КППсубагента КАК КППсубагента,
	                |	НеАгригированная.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	НеАгригированная.АгентВозн КАК АгентВозн,
	                |	НеАгригированная.Класс КАК Класс,
	                |	НеАгригированная.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце,
	                |	НеАгригированная.Месяц КАК Месяц,
	                |	МАКСИМУМ(ПериодыТарифовАэроэкспресс.Период) КАК Период,
	                |	НеАгригированная.ДатаДляТарифа КАК ДатаДляТарифа
	                |ПОМЕСТИТЬ ПериодТарифа
	                |ИЗ
	                |	НеАгригированная КАК НеАгригированная
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыТарифовАэроэкспресс КАК ПериодыТарифовАэроэкспресс
	                |		ПО НеАгригированная.ДатаДляТарифа >= ПериодыТарифовАэроэкспресс.Период
	                |			И НеАгригированная.Класс = ПериодыТарифовАэроэкспресс.Тариф.Класс
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	НеАгригированная.НомерЭлектронногоБилета,
	                |	НеАгригированная.ДатаПродажи,
	                |	НеАгригированная.СуммаВозврата,
	                |	НеАгригированная.ДатаВозврата,
	                |	НеАгригированная.ДатаВозвратаДС,
	                |	НеАгригированная.НаименованиеКонтрагента,
	                |	НеАгригированная.ИННКонтрагента,
	                |	НеАгригированная.КППКонтрагента,
	                |	НеАгригированная.ЮридическийАдресКонтрагента,
	                |	НеАгригированная.НаименованиеСубагента,
	                |	НеАгригированная.ИННсубагента,
	                |	НеАгригированная.КППсубагента,
	                |	НеАгригированная.ЮридическийАдресСубагента,
	                |	НеАгригированная.АгентВозн,
	                |	НеАгригированная.Класс,
	                |	НеАгригированная.КоличествоБилетовВМесяце,
	                |	НеАгригированная.Месяц,
	                |	НеАгригированная.ДатаДляТарифа
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПериодТарифа.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ПериодТарифа.ДатаПродажи КАК ДатаПродажи,
	                |	ПериодТарифа.СуммаВозврата КАК СуммаВозврата,
	                |	ПериодТарифа.ДатаВозврата КАК ДатаВозврата,
	                |	ПериодТарифа.ДатаВозвратаДС КАК ДатаВозвратаДС,
	                |	ПериодТарифа.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ПериодТарифа.ИННКонтрагента КАК ИННКонтрагента,
	                |	ПериодТарифа.КППКонтрагента КАК КППКонтрагента,
	                |	ПериодТарифа.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ПериодТарифа.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ПериодТарифа.ИННсубагента КАК ИННсубагента,
	                |	ПериодТарифа.КППсубагента КАК КППсубагента,
	                |	ПериодТарифа.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ПериодТарифа.АгентВозн КАК АгентВозн,
	                |	ПериодТарифа.Класс КАК Класс,
	                |	ПериодТарифа.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце,
	                |	ПериодТарифа.Месяц КАК Месяц,
	                |	ПериодТарифа.Период КАК Период,
	                |	ПериодТарифа.ДатаДляТарифа КАК ДатаДляТарифа,
	                |	ПериодыТарифовАэроэкспресс.Тариф КАК Тариф
	                |ПОМЕСТИТЬ ТарифИПериод
	                |ИЗ
	                |	ПериодТарифа КАК ПериодТарифа
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыТарифовАэроэкспресс КАК ПериодыТарифовАэроэкспресс
	                |		ПО ПериодТарифа.Период = ПериодыТарифовАэроэкспресс.Период
	                |			И ПериодТарифа.Класс = ПериодыТарифовАэроэкспресс.Тариф.Класс
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТарифИПериод.НомерЭлектронногоБилета КАК НомерЭлектронногоБилета,
	                |	ТарифИПериод.ДатаПродажи КАК ДатаПродажи,
	                |	ТарифИПериод.СуммаВозврата КАК СуммаВозврата,
	                |	ТарифИПериод.ДатаВозврата КАК ДатаВозврата,
	                |	ТарифИПериод.ДатаВозвратаДС КАК ДатаВозвратаДС,
	                |	ТарифИПериод.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	                |	ТарифИПериод.ИННКонтрагента КАК ИННКонтрагента,
	                |	ТарифИПериод.КППКонтрагента КАК КППКонтрагента,
	                |	ТарифИПериод.ЮридическийАдресКонтрагента КАК ЮридическийАдресКонтрагента,
	                |	ТарифИПериод.НаименованиеСубагента КАК НаименованиеСубагента,
	                |	ТарифИПериод.ИННсубагента КАК ИННсубагента,
	                |	ТарифИПериод.КППсубагента КАК КППсубагента,
	                |	ТарифИПериод.ЮридическийАдресСубагента КАК ЮридическийАдресСубагента,
	                |	ТарифИПериод.Класс КАК Класс,
	                |	ТарифИПериод.КоличествоБилетовВМесяце КАК КоличествоБилетовВМесяце,
	                |	ТарифИПериод.Месяц КАК Месяц,
	                |	ТарифИПериод.Период КАК Период,
	                |	ТарифИПериод.ДатаДляТарифа КАК ДатаДляТарифа,
	                |	ТарифИПериод.Тариф КАК Тариф,
	                |	МАКСИМУМ(ЕСТЬNULL(ТарифыАэроэкспрессПоездаГрадация.Вознаграждение, 0)) КАК АгентВозн
	                |ИЗ
	                |	ТарифИПериод КАК ТарифИПериод
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТарифыАэроэкспрессПоезда.Градация КАК ТарифыАэроэкспрессПоездаГрадация
	                |		ПО ТарифИПериод.Тариф = ТарифыАэроэкспрессПоездаГрадация.Ссылка
	                |			И ТарифИПериод.КоличествоБилетовВМесяце >= ТарифыАэроэкспрессПоездаГрадация.КоличествоБилетов
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ТарифИПериод.НомерЭлектронногоБилета,
	                |	ТарифИПериод.ДатаПродажи,
	                |	ТарифИПериод.СуммаВозврата,
	                |	ТарифИПериод.ДатаВозврата,
	                |	ТарифИПериод.ДатаВозвратаДС,
	                |	ТарифИПериод.НаименованиеКонтрагента,
	                |	ТарифИПериод.ИННКонтрагента,
	                |	ТарифИПериод.КППКонтрагента,
	                |	ТарифИПериод.ЮридическийАдресКонтрагента,
	                |	ТарифИПериод.НаименованиеСубагента,
	                |	ТарифИПериод.ИННсубагента,
	                |	ТарифИПериод.КППсубагента,
	                |	ТарифИПериод.ЮридическийАдресСубагента,
	                |	ТарифИПериод.Класс,
	                |	ТарифИПериод.КоличествоБилетовВМесяце,
	                |	ТарифИПериод.Месяц,
	                |	ТарифИПериод.Период,
	                |	ТарифИПериод.ДатаДляТарифа,
	                |	ТарифИПериод.Тариф";
	
	Запрос.УстановитьПараметр("ТЗ",ТЗСБилетами);
	Запрос.УстановитьПараметр("ДанныеПоЧислам",ТаблицаДанных);
	
	Результат = Запрос.Выполнить().Выгрузить();
    Возврат Результат;
	
КонецФункции


Функция ДанныеДляАвтобусы(ВидОтчета,ДатаНачала,ДатаОкончания)
	
	СтруктураДанных = Новый Структура;
	
   // ДатаНачалаСтрока = Формат(ДатаНачала,"ДФ=yyyyMMdd");
   // ДатаОкончанияСтрока = Формат(ДатаОкончания,"ДФ=yyyyMMdd");
   // 
   // Connection = Новый COMОбъект("ADODB.Connection");
   // Connection.ConnectionTimeout  = 0;
   // Connection.CommandTimeout   = 0;
   // Connection.Open ("DRIVER={SQL Server};SERVER=db1;UID=fin_auditor;PWD=Cdthrf123;DATABASE=PGW2_R");
   // 
   // 	
   // RecordSet.Close();
   // Connection.Close();
   // 
   //КоличествоБилетов = ТаблицаПокупок.Количество() - ТаблицаВозвратов.Количество();
   //
   // Если ТаблицаПокупок.Количество() > 0 Тогда	
   // 	ТаблицаПокупок = ОпределитьАгентскоеВознаграждение(ТаблицаПокупок,КоличествоБилетов);
   // 	СтруктураДанных.Вставить("ТаблицаПокупок",ТаблицаПокупок);
   // КонецЕсли;
   // 
   // Если ТаблицаВозвратов.Количество()> 0 Тогда
   // 	ТаблицаВозвратов = ОпределитьАгентскоеВознаграждениеВозвраты(ТаблицаВозвратов,КоличествоБилетов);
   // 	СтруктураДанных.Вставить("ТаблицаВозвратов",ТаблицаВозвратов);	
   // КонецЕсли;
   // 
	Возврат СтруктураДанных;

	
КонецФункции

Функция ПодготовитьПустуюТаблицуДанных()
		
	ТаблицаСДанными = Новый ТаблицаЗначений;
	ТаблицаСДанными.Колонки.Добавить("НомерЭлектронногоБилета",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Номер электронного билета");
	ТаблицаСДанными.Колонки.Добавить("ДатаПродажи",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"Дата продажи");
	ТаблицаСДанными.Колонки.Добавить("СуммаПродажи",ОбщегоНазначения.ОписаниеТипаЧисло(15,2),"Сумма продажи");
	ТаблицаСДанными.Колонки.Добавить("ДатаОплаты",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"Дата оплаты'");
	ТаблицаСДанными.Колонки.Добавить("НомерПлатёжногоДокумента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"№ платёжного документа");
	ТаблицаСДанными.Колонки.Добавить("СуммаПоступившейОплаты",ОбщегоНазначения.ОписаниеТипаЧисло(15,2),"Сумма поступившей оплаты");
	ТаблицаСДанными.Колонки.Добавить("ДатаПроезда",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"Дата проезда");
	ТаблицаСДанными.Колонки.Добавить("НаименованиеКонтрагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Наименование контрагента");
	ТаблицаСДанными.Колонки.Добавить("ИННКонтрагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"ИНН");
	ТаблицаСДанными.Колонки.Добавить("КППКонтрагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"КПП");
	ТаблицаСДанными.Колонки.Добавить("ЮридическийАдресКонтрагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Юридический адрес");
	ТаблицаСДанными.Колонки.Добавить("НаименованиеСубагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Наименование субагента");
	ТаблицаСДанными.Колонки.Добавить("ИННсубагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"ИНН Субагента");
	ТаблицаСДанными.Колонки.Добавить("КППсубагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"КПП Субагента");
	ТаблицаСДанными.Колонки.Добавить("ЮридическийАдресСубагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Юридический адрес Субагента");
	ТаблицаСДанными.Колонки.Добавить("АгентВозн",ОбщегоНазначения.ОписаниеТипаЧисло(15,2),"АгентВозн");
	ТаблицаСДанными.Колонки.Добавить("Класс",ОбщегоНазначения.ОписаниеТипаЧисло(15),"Класс");
    ТаблицаСДанными.Колонки.Добавить("ДатаДляТарифа",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"ДатаДляТарифа");


	Возврат ТаблицаСДанными;
		
КонецФункции

Функция ПодготовитьПустуюТаблицуДанныхВозвратов()
		
	ТаблицаСДанными = Новый ТаблицаЗначений;
	ТаблицаСДанными.Колонки.Добавить("НомерЭлектронногоБилета",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Номер электронного билета");
	ТаблицаСДанными.Колонки.Добавить("ДатаПродажи",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"Дата продажи");
	ТаблицаСДанными.Колонки.Добавить("СуммаВозврата",ОбщегоНазначения.ОписаниеТипаЧисло(15,2),"Сумма продажи");
	ТаблицаСДанными.Колонки.Добавить("ДатаВозврата",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"Дата оплаты'");
	ТаблицаСДанными.Колонки.Добавить("ДатаВозвратаДС",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"Дата возврата денежных средств покупателю");
	ТаблицаСДанными.Колонки.Добавить("НаименованиеКонтрагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Наименование контрагента");
	ТаблицаСДанными.Колонки.Добавить("ИННКонтрагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"ИНН");
	ТаблицаСДанными.Колонки.Добавить("КППКонтрагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"КПП");
	ТаблицаСДанными.Колонки.Добавить("ЮридическийАдресКонтрагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Юридический адрес");
	ТаблицаСДанными.Колонки.Добавить("НаименованиеСубагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Наименование субагента");
	ТаблицаСДанными.Колонки.Добавить("ИННсубагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"ИНН Субагента");
	ТаблицаСДанными.Колонки.Добавить("КППсубагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"КПП Субагента");
	ТаблицаСДанными.Колонки.Добавить("ЮридическийАдресСубагента",ОбщегоНазначения.ОписаниеТипаСтрока(150),"Юридический адрес Субагента");
	ТаблицаСДанными.Колонки.Добавить("АгентВозн",ОбщегоНазначения.ОписаниеТипаЧисло(15,2),"АгентВозн");
	ТаблицаСДанными.Колонки.Добавить("Класс",ОбщегоНазначения.ОписаниеТипаЧисло(15,2),"Класс");
    ТаблицаСДанными.Колонки.Добавить("ДатаДляТарифа",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),"ДатаДляТарифа");

	Возврат ТаблицаСДанными;
		
КонецФункции

Функция ОпределитьСуммуВознаграждения(СуммаБилета,ДатаПродажи)
	
	Запрос = Новый Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	                |	ГрадацияСтоимостиБилетовСрезПоследних.Период КАК Период,
	                |	ГрадацияСтоимостиБилетовСрезПоследних.СуммаБилета КАК СуммаБилета,
	                |	ГрадацияСтоимостиБилетовСрезПоследних.Вознаграждение КАК Вознаграждение
	                |ИЗ
	                |	РегистрСведений.ГрадацияСтоимостиБилетов.СрезПоследних(&Период, СуммаБилета = &СуммаБилета) КАК ГрадацияСтоимостиБилетовСрезПоследних";
	Запрос.УстановитьПараметр("Период",ДатаПродажи);
	Запрос.УстановитьПараметр("СуммаБилета",СуммаБилета);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Вознаграждение;
	КонецЕсли;

	
КонецФункции

Функция СформироватьПредставлениеЧислаПрописью(Число)
	
	
	ФормСтрока = "Л = ru_RU; ДП = Истина";
	ПарПредмета="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
	ПрописьЧисла = ЧислоПрописью(Число, ФормСтрока, ПарПредмета);
	
	Возврат ПрописьЧисла;
	
КонецФункции

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма            - Число - сумма от которой надо рассчитывать налоги;
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму ("внутри" или "сверху");
//  СтавкаНДС        - Число - процентная ставка НДС.
//
// Возвращаемое значение:
//  Число - полученная сумма НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Если СуммаВключаетНДС Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;
	
	Если НЕ СуммаВключаетНДС Тогда
		СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()


