
//Запись данных от ОФД
Процедура ЗаписатьПорциюДанных(ПорцияДанных) Экспорт
	
	ЭлементовВТранзакции = 1000;
	Счетчик = 0;
	
	Для Каждого Строка Из ПорцияДанных Цикл
		
		Если Счетчик = 0 Тогда
			НачатьТранзакцию();			
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		МенеджерЗаписи = РегистрыСведений.ФискальнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Строка);
		МенеджерЗаписи.ИдентификаторПозиции = Новый УникальныйИдентификатор;
		МенеджерЗаписи.Записать();
		
		Если Счетчик = ЭлементовВТранзакции Тогда
			ЗафиксироватьТранзакцию();
			Счетчик = 0;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	
КонецПроцедуры




#Область АэроЭкспресс
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗапросДанныеАэроэкпрессФискализированные(ДатаНачалаSQL,ДатаОкончанияSQL) Экспорт
	
	 
	ТекстЗапроса =  "
	|Select  opondate.OrderPaymentId,rp.Name,rp.Sum,r.ReceiptTime,r.type from OrderPaymentReceipt opondate (NOLOCK)
	|join Receipt r (NOLOCK) on opondate.ReceiptId = r.ReceiptId and r.IsTest = 0 left join ReceiptPosition rp (NOLOCK)  on r.ReceiptId = rp.ReceiptId
	|Where exists (Select  distinct opmr.OrderPaymentId from Trans t (NOLOCK) join orRzhdAE ae (NOLOCK) on t.idtrans = ae.idtrans inner join OrderPaymentReceipt opmr (NOLOCK) on t.OrderPaymentId = opmr.OrderPaymentId  where t.test = 0 and t.ConfirmDate >= '"+ДатаНачалаSQL+"'  and t.ConfirmDate < '"+ДатаОкончанияSQL+"' 
	|and opondate.OrderPaymentId = opmr.OrderPaymentId)
	|and (not r.FiscalDocumentAttribute = '' or (r.FiscalDocumentAttribute = '' and (r.Sum =0 and (r.BonusSum = 0 or isNull(r.BonusSum,0)= 0)))) and rp.Name LIKE '%Аэро%'";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ЗапросДанныеАэроэкпресс()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Строка   - Текст запроса для выполнения на стороне SQL
//
Функция ЗапросДанныеАэроэкспрессНаФискализацию(ДатаНачалаSQL,ДатаОкончанияSQL) Экспорт
	
	ТекстЗапроса = "
	|Select opmr.OrderPaymentId,
	|t.amount as sum, 
	|t.type 
	|from Trans t (NOLOCK) 
	|join orRzhdAE ae (NOLOCK) on t.idtrans = ae.idtrans 
	|join OrderPaymentReceipt opmr (NOLOCK) on t.OrderPaymentId = opmr.OrderPaymentId  
	|where  t.test = 0 and t.ConfirmDate >= '"+ДатаНачалаSQL+"'  and t.ConfirmDate < '"+ДатаОкончанияSQL+"'";
	
	Возврат ТекстЗапроса;
	
	
КонецФункции // ЗапросДанныеАэроэкспрессНаФискализаццию()

Функция ПодготовитьДанныеАэроЭкспресс(Соединение,Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	ДатаНачалаSQL = ОбщегоНазначения.ПреобразоватьДатуВДатуSQL(ДатаНачала);
	ДляSQLДатаОкончания = КонецДня(ДатаОкончания) + 1;
	ДатаОкончанияSQL = ОбщегоНазначения.ПреобразоватьДатуВДатуSQL(ДляSQLДатаОкончания);
	
	ТзУспешнаяФискализация = ПодготовитьТаблицуУспешнойФискализации();
	ТзПолнаяФискализация = ПодготовитьТаблицуПолнойФискализации();
	
	ЗаполнитьТаблицуПоЗапросуССоединением(Соединение,ЗапросДанныеАэроэкспрессНаФискализацию(ДатаНачалаSQL,ДатаОкончанияSQL),ТзПолнаяФискализация);
	ЗаполнитьТаблицуПоЗапросуССоединением(Соединение,ЗапросДанныеАэроэкпрессФискализированные(ДатаНачалаSQL,ДатаОкончанияSQL),ТзУспешнаяФискализация);
	
	ДанныеМассив = ПолучитьГотовыеТаблицыДляАнализа(ДатаНачала,ДатаОкончания,ТзУспешнаяФискализация,ТзПолнаяФискализация,"Аэро");
	
	Различия = ДанныеМассив[5].Выгрузить();
	
	ПроставитьДатуПодтвержденияАэроэкспресс(Соединение,Различия);
	
	ДанныеМассив.Добавить(Различия);
	
	Возврат ДанныеМассив;
	
КонецФункции

Процедура ПроставитьДатуПодтвержденияАэроэкспресс(Соединение,РазличияФискальныхДанных) Экспорт
		
	Для Каждого Строка Из РазличияФискальныхДанных Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДатаПодтверждения) Тогда
			СтрокаПоиска = Строка.ПозицияЧека;
			НомерБланкаМассив = СтрРазделить(СтрокаПоиска,"№");
			Если НомерБланкаМассив.Количество() > 0 Тогда	
				НомерБланка = НомерБланкаМассив[1];				
				ТекстЗапросаПоискДатыПодтверждения = "SELECT t.ConfirmDate, t.OrderPaymentId from AeroPassenger aero (NOLOCK) join Trans t (NOLOCK) on aero.TransId = t.idtrans  where t.test = 0 and aero.TicketId = '" + НомерБланка + "'";	
				RecordSet = Соединение.Execute(ТекстЗапросаПоискДатыПодтверждения);
				Пока НЕ RecordSet.EOF() Цикл
					Строка.ДатаПодтверждения = RecordSet.Fields("ConfirmDate").Value;
					Строка.НомерПлатежа = RecordSet.Fields("OrderPaymentId").Value;

					RecordSet.MoveNext();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Страховки

Процедура ПроставитьДатуСтрахование(Соединение,РазличияФискальныхДанных) Экспорт
	
	Для Каждого Строка Из РазличияФискальныхДанных Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДатаПодтверждения) Тогда
			СтрокаПоиска = Строка.ПозицияЧека;
			НомерБланкаМассив = СтрРазделить(СтрокаПоиска,"№");
			Если НомерБланкаМассив.Количество() > 0 Тогда	
				НомерБланка = СокрЛП(НомерБланкаМассив[1]);	
				СерияМассив = НомерБланкаМассив[0];
				НомерСерии = СтрНайти(СерияМассив,"серия");	
				Если НомерСерии > 0 Тогда
					//обрежем слово серия
					НомерСерии = НомерСерии+6;
					СерияНомер = СокрЛП(Сред(СерияМассив,НомерСерии,СтрДлина(СерияНомер) - НомерСерии));
					ТекстЗапросаПоискДатыПодтверждения = "Select distinct t.confirmdate,t.idtrans,t.orderpaymentid from orInsurance ins (NOLOCK) join Trans t (NOLOCK) on t.idtrans = ins.idtrans where ins.number = '" + НомерБланка + "' and ins.series = '" + СерияНомер + "' and t.type ="+?(Строка.ТипЧека = 2,14,1);	
					RecordSet = Соединение.Execute(ТекстЗапросаПоискДатыПодтверждения);
					Пока НЕ RecordSet.EOF() Цикл
						Строка.ДатаПодтверждения = RecordSet.Fields("confirmdate").Value;
						Строка.НомерПлатежа = RecordSet.Fields("orderpaymentid").Value; 
						RecordSet.MoveNext();
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
КонецЦикла;

КонецПроцедуры

Функция ПодготовитьДанныеСтрахование(Соединение,Знач ДатаНачала,Знач ДатаОкончания) Экспорт
	
	ДатаНачалаSQL = ОбщегоНазначения.ПреобразоватьДатуВДатуSQL(ДатаНачала);
	ДляSQLДатаОкончания = КонецДня(ДатаОкончания) + 1;
	ДатаОкончанияSQL = ОбщегоНазначения.ПреобразоватьДатуВДатуSQL(ДляSQLДатаОкончания);
	
	ТзУспешнаяФискализация = ПодготовитьТаблицуУспешнойФискализации();
	ТзПолнаяФискализация = ПодготовитьТаблицуПолнойФискализации();
	
	ЗаполнитьТаблицуПоЗапросуССоединением(Соединение,ЗапросСтрахованиеНаФискализацию(ДатаНачалаSQL,ДатаОкончанияSQL),ТзПолнаяФискализация);
	ЗаполнитьТаблицуПоЗапросуССоединением(Соединение,ЗапросСтрахованиеФискализированные(ДатаНачалаSQL,ДатаОкончанияSQL),ТзУспешнаяФискализация);
	
	ДанныеМассив = ПолучитьГотовыеТаблицыДляАнализа(ДатаНачала,ДатаОкончания,ТзУспешнаяФискализация,ТзПолнаяФискализация,"Страх");
	
	Различия = ДанныеМассив[5].Выгрузить();
	
	ПроставитьДатуСтрахование(Соединение,Различия);
	
	ДанныеМассив.Добавить(Различия);
	
	Возврат ДанныеМассив;
	
КонецФункции

Функция ЗапросСтрахованиеФискализированные(ДатаНачалаSQL,ДатаОкончанияSQL) Экспорт
	
	//Фискализированные данные(период по статистике) страхование
	ТекстЗапроса = "
	|Select opondate.OrderPaymentId, 
	|rp.Name, 
	|rp.Sum, 
	|r.ReceiptTime,
	|r.type 
	|from OrderPaymentReceipt opondate (NOLOCK)
	|join Receipt r (NOLOCK) on opondate.ReceiptId = r.ReceiptId and r.IsTest = 0 
	|left join ReceiptPosition rp (NOLOCK)  on r.ReceiptId = rp.ReceiptId
	|Where opondate.OrderPaymentId in (
	|	Select distinct
	|	t.OrderPaymentId
	|	from orInsurance ins 
	|	join Trans t (NOLOCK) on t.idtrans = ins.idtrans 
	|	join ufs_Accountings acc (NOLOCK) on acc.idtrans = t.idtrans
	|	join OrderPayment op (NOLOCK) on t.OrderPaymentId = op.OrderPaymentId
	|	join PaymentMethod pm(NOLOCK) on pm.PaymentMethodId = op.PaymentMethodId and pm.FiscaleReceipt = 1   
	|	where  acc.tpstatus = 5 and acc.idpayer = 47072 and acc.directfee = 1 and t.test = 0 and acc.phase = 1
	|	and t.ConfirmDate >=  '"+ДатаНачалаSQL+"' and t.confirmdate <  '"+ДатаОкончанияSQL+"')
	|and (not r.FiscalDocumentAttribute = '' or (r.FiscalDocumentAttribute = '' and (r.Sum =0 and (r.BonusSum = 0 or isNull(r.BonusSum,0)= 0)))) and rp.Name LIKE 'Страх%'";
	
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ЗапросСтрахованиеНаФискализацию(ДатаНачалаSQL,ДатаОкончанияSQL) Экспорт
	
	
	ТекстЗапроса = "
	|Select 
	|t.OrderPaymentId,
	|t.amount as sum,
	|t.type
	|from orInsurance ins 
	|join Trans t (NOLOCK) on t.idtrans = ins.idtrans 
	|join ufs_Accountings acc (NOLOCK) on acc.idtrans = t.idtrans
	|join OrderPayment op (NOLOCK) on t.OrderPaymentId = op.OrderPaymentId
	|join PaymentMethod pm (NOLOCK) on pm.PaymentMethodId = op.PaymentMethodId and pm.FiscaleReceipt = 1   
	|where  acc.tpstatus = 5 and acc.idpayer = 47072 and acc.directfee = 1 and t.test = 0 and acc.phase = 1
	|and t.ConfirmDate >= '"+ДатаНачалаSQL+"' and t.confirmdate < '"+ДатаОкончанияSQL+"'";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СервисныйСбор

Функция ЗапросПоСтатистике(ДатаНачалаSQL,ДатаОкончанияSQL) Экспорт
	
	ТекстЗапроса = 	"Select
	|sum(acc.sumfee) As Sum 
	|from ufs_Accountings acc 
	|join Trans t (NOLOCK) on acc.idtrans = t.idtrans 
	|join OrderPayment op (NOLOCK) on t.OrderPaymentId = op.OrderPaymentId
	|join PaymentMethod pm (NOLOCK) on pm.PaymentMethodId = op.PaymentMethodId and pm.FiscaleReceipt = 1  
	|where acc.phase = 1  and acc.tpstatus = 5 and  acc.datereg >= '"+ДатаНачалаSQL+"' and acc.datereg < '"+ДатаОкончанияSQL+"' and acc.idpayer = 47072 and acc.directfee = 1 and acc.sumfee > 0
	|group by t.type";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗапросСервисныйСборФискализированные(ДатаНачалаSQL,ДатаОкончанияSQL) Экспорт
	
	//Фискализированные данные(период по статистике) Сервисный сбор
	ТекстЗапроса = "
	| Select opondate.OrderPaymentId, 
	| rp.Name, 
	| rp.Sum, 
	| r.ReceiptTime,
	| r.type 
	| from OrderPaymentReceipt opondate (NOLOCK)
	| join Receipt r (NOLOCK) on opondate.ReceiptId = r.ReceiptId and r.IsTest = 0 
	| left join ReceiptPosition rp (NOLOCK) on r.ReceiptId = rp.ReceiptId
	| where  opondate.OrderPaymentId in (
	| Select distinct t.OrderPaymentId
	| from ufs_Accountings acc (NOLOCK)
	| join Trans t (NOLOCK) on acc.idtrans = t.idtrans 
	| join OrderPayment op (NOLOCK) on t.OrderPaymentId = op.OrderPaymentId
	| join PaymentMethod pm (NOLOCK) on pm.PaymentMethodId = op.PaymentMethodId and pm.FiscaleReceipt = 1  
	| where acc.phase = 1  and acc.tpstatus = 5 and  acc.datereg >= '"+ДатаНачалаSQL+"' and acc.datereg < '"+ДатаОкончанияSQL+"' and acc.idpayer = 47072 and acc.directfee = 1 and acc.sumfee > 0 and t.test = 0) 
	| and  not r.FiscalDocumentAttribute = '') and rp.Name LIKE 'Сервисный сбор за услуги по оформлению%'";
	
	Возврат ТекстЗапроса;	
	
КонецФункции // ЗапросСервисныйСбор()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗапросСервисныйСборНаФискализацию(ДатаНачалаSQL,ДатаОкончанияSQL) Экспорт
	
	
	ТекстЗапроса = "
	| Select t.OrderPaymentId, t.type,acc.sumfee as sum
	| from ufs_Accountings acc (NOLOCK)
	| join Trans t (NOLOCK) on acc.idtrans = t.idtrans 
	| join OrderPayment op (NOLOCK) on t.OrderPaymentId = op.OrderPaymentId
	| join PaymentMethod pm (NOLOCK) on pm.PaymentMethodId = op.PaymentMethodId and pm.FiscaleReceipt = 1  
	| where acc.phase = 1  and acc.tpstatus = 5 and  acc.datereg >= '"+ДатаНачалаSQL+"' and acc.datereg < '"+ДатаОкончанияSQL+"' and acc.idpayer = 47072 and acc.directfee = 1 and acc.sumfee > 0 and t.test = 0";
	
	 Возврат ТекстЗапроса;
	
КонецФункции // ЗапросСервисныйСборНаФискализацию()

Функция ПодготовитьДанныеСервисногоСбора(Соединение,Знач ДатаНачала,Знач ДатаОкончания) Экспорт
	
	ДатаНачалаSQL = ОбщегоНазначения.ПреобразоватьДатуВДатуSQL(ДатаНачала);
	ДляSQLДатаОкончания = КонецДня(ДатаОкончания) + 1;
	ДатаОкончанияSQL = ОбщегоНазначения.ПреобразоватьДатуВДатуSQL(ДляSQLДатаОкончания);
	
	ТзУспешнаяФискализация = ПодготовитьТаблицуУспешнойФискализации();
	ТзПолнаяФискализация = ПодготовитьТаблицуПолнойФискализации();
	
	ЗаполнитьТаблицуПоЗапросуССоединением(Соединение,ЗапросСервисныйСборНаФискализацию(ДатаНачалаSQL,ДатаОкончанияSQL),ТзПолнаяФискализация);
	ЗаполнитьТаблицуПоЗапросуССоединением(Соединение,ЗапросСервисныйСборФискализированные(ДатаНачалаSQL,ДатаОкончанияSQL),ТзУспешнаяФискализация);
	
	ДанныеМассив = ПолучитьГотовыеТаблицыДляАнализа(ДатаНачала,ДатаОкончания,ТзУспешнаяФискализация,ТзПолнаяФискализация,"Сервисный сбор за услуги по оформлению");
	
	Различия = ДанныеМассив[5].Выгрузить();
	
	ПроставитьДатуПодтвержденияСервисныйСбор(Соединение,Различия);
	
	ДанныеМассив.Добавить(Различия);
	
	Возврат ДанныеМассив;
	
КонецФункции

Процедура ПроставитьДатуПодтвержденияСервисныйСбор(Соединение,РазличияФискальныхДанных) Экспорт
		
	Для Каждого Строка Из РазличияФискальныхДанных Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДатаПодтверждения) Тогда
			СтрокаПоиска = Строка.ПозицияЧека;
			НомерБланкаМассив = СтрРазделить(СтрокаПоиска,"№");
			Если НомерБланкаМассив.Количество() > 0 Тогда	
				НомерБланка = НомерБланкаМассив[1];
				СуммаСбора = Формат(Строка.СуммаПозиции,"ЧРД=.; ЧГ=0");
				ТекстЗапросаПоискДатыПодтверждения = "Select t.idtrans,acc.sumfee,acc.datereg,t.orderpaymentid from orRZhD rzhd left join trans t on t.idtrans = rzhd.idtrans left join ufs_Accountings acc on t.idtrans = acc.idtrans  where rzhd.nbron =  '"+НомерБланка+"' and  acc.phase = 1  and acc.tpstatus = 5  and t.test = 0 and acc.idpayer = 47072 and acc.directfee = 1 and acc.sumfee = " +СуммаСбора;
				RecordSet = Соединение.Execute(ТекстЗапросаПоискДатыПодтверждения);
				Пока НЕ RecordSet.EOF() Цикл
					Строка.ДатаПодтверждения = RecordSet.Fields("datereg").Value;
					Строка.НомерПлатежа = RecordSet.Fields("orderpaymentid").Value;
					RecordSet.MoveNext();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из РазличияФискальныхДанных Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДатаПодтверждения)  Тогда
			СтрокаПоиска = Строка.ПозицияЧека;
			НомерБланкаМассив = СтрРазделить(СтрокаПоиска,"№");
			Если НомерБланкаМассив.Количество() > 0 Тогда	
				НомерБланка = НомерБланкаМассив[1];
				СуммаСбора = Формат(Строка.СуммаПозиции,"ЧРД=.; ЧГ=0");
				ТекстЗапросаПоискДатыПодтверждения = "SELECT  acc.datereg,t.orderpaymentid FROM orAir orair inner join Trans t on t.idtrans = orair.idtrans inner join ufs_Accountings acc on acc.idtrans = t.idtrans  where orair.PNR = '"+НомерБланка+"' and t.test = 0  and  acc.phase = 1  and acc.tpstatus = 5  and acc.idpayer = 47072 and acc.directfee = 1 and acc.sumfee = " +СуммаСбора;
				RecordSet = Соединение.Execute(ТекстЗапросаПоискДатыПодтверждения);
				Пока НЕ RecordSet.EOF() Цикл
					Строка.ДатаПодтверждения = RecordSet.Fields("datereg").Value;
					Строка.НомерПлатежа = RecordSet.Fields("orderpaymentid").Value;
					RecordSet.MoveNext();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеДанные

Функция ПодготовитьТаблицуУспешнойФискализации() Экспорт
	
	УспешнаяФискализация = Новый ТаблицаЗначений;
	УспешнаяФискализация.Колонки.Добавить("ПозицияЧека",ОбщегоНазначения.ОписаниеТипаСтрока(250),"Позиция чека");
	УспешнаяФискализация.Колонки.Добавить("СуммаПозиции",ОбщегоНазначения.ОписаниеТипаЧисло(15,2),"Сумма позиции");
	УспешнаяФискализация.Колонки.Добавить("ДатаЧека",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя),"ДатаЧека");
	УспешнаяФискализация.Колонки.Добавить("НомерПлатежа",ОбщегоНазначения.ОписаниеТипаЧисло(15,0),"НомерПлатежа");
	УспешнаяФискализация.Колонки.Добавить("ДатаПодтверждения",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя),"ДатаПодтверждения");
	УспешнаяФискализация.Колонки.Добавить("ТипЧека",ОбщегоНазначения.ОписаниеТипаЧисло(2,0),"ТипЧека");

	Возврат УспешнаяФискализация;
	
КонецФункции // ПодготовитьТаблицуУспешнойФискализации()

Функция ПодготовитьТаблицуПолнойФискализации() Экспорт
	
	ПолнаяФискализация = Новый ТаблицаЗначений;
	//ПолнаяФискализация.Колонки.Добавить("ПозицияЧека",ОбщегоНазначения.ОписаниеТипаСтрока(250),"Позиция чека");

	//ПолнаяФискализация.Колонки.Добавить("ДатаЧека",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя),"ДатаЧека");
	ПолнаяФискализация.Колонки.Добавить("НомерПлатежа",ОбщегоНазначения.ОписаниеТипаЧисло(15,0),"НомерПлатежа");
	////ПолнаяФискализация.Колонки.Добавить("ДатаПодтверждения",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя),"ДатаПодтверждения");
	ПолнаяФискализация.Колонки.Добавить("ТипЧека",ОбщегоНазначения.ОписаниеТипаЧисло(2,0),"ТипЧека");
	ПолнаяФискализация.Колонки.Добавить("СуммаПозиции",ОбщегоНазначения.ОписаниеТипаЧисло(15,2),"Сумма позиции");

	Возврат ПолнаяФискализация;
	
КонецФункции // ПодготовитьТаблицуПолнойФискализации()

#КонецОбласти

Функция ПолучитьГотовыеТаблицыДляАнализа(ДатаНачала,ДатаОкончания,УспешнаяФискализация,ПолнаяФискализация,НаименованиеВЧеке) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ДанныеПоПозициямЧека.ПозицияЧека КАК ПозицияЧека,
	                |	ДанныеПоПозициямЧека.Сумма КАК СуммаПозиции,
	                |	ДанныеПоПозициямЧека.Период КАК ДатаЧека,
	                |	ВЫБОР
	                |		КОГДА ДанныеПоПозициямЧека.ОперацияЧека = ""Возврат прихода""
	                |			ТОГДА 2
	                |		ИНАЧЕ 1
	                |	КОНЕЦ КАК ТипЧека
	                |ПОМЕСТИТЬ ДанныеОФД
	                |ИЗ
	                |	РегистрСведений.ДанныеПоПозициямЧека КАК ДанныеПоПозициямЧека
	                |ГДЕ
	                |	ДанныеПоПозициямЧека.ПозицияЧека ПОДОБНО ""%"" + &НаименованиеВЧеке + ""%""
	                |	И ДанныеПоПозициямЧека.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	УспешнаяФискализация.ПозицияЧека КАК ПозицияЧека,
	                |	УспешнаяФискализация.СуммаПозиции КАК СуммаПозиции,
	                |	УспешнаяФискализация.ДатаПодтверждения КАК ДатаПодтверждения,
	                |	УспешнаяФискализация.ДатаЧека КАК ДатаЧека,
	                |	УспешнаяФискализация.НомерПлатежа КАК НомерПлатежа,
	                |	УспешнаяФискализация.ТипЧека КАК ТипЧека
	                |ПОМЕСТИТЬ УспешнаяФискализация
	                |ИЗ
	                |	&УспешнаяФискализация КАК УспешнаяФискализация
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПолнаяФискализация.НомерПлатежа КАК НомерПлатежа,
					//|	ПолнаяФискализация.ДатаПодтверждения КАК ДатаПодтверждения,
					//|	ПолнаяФискализация.ПозицияЧека КАК ПозицияЧека,
					|	ПолнаяФискализация.СуммаПозиции КАК СуммаПозиции,
					|	ПолнаяФискализация.ТипЧека КАК ТипЧека
	                |ПОМЕСТИТЬ ПолнаяФискализация
	                |ИЗ
	                |	&ПолнаяФискализация КАК ПолнаяФискализация
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПолнаяФискализация.НомерПлатежа КАК НомерПлатежа,
					//|	ПолнаяФискализация.ДатаПодтверждения КАК ДатаПодтверждения,
					//|	ПолнаяФискализация.ПозицияЧека КАК ПозицияЧека,
					|	ПолнаяФискализация.СуммаПозиции КАК СуммаПозиции,
					|	ПолнаяФискализация.ТипЧека КАК ТипЧека
	                |ПОМЕСТИТЬ НеуспешнаяПолнаяФискализация
	                |ИЗ
	                |	ПолнаяФискализация КАК ПолнаяФискализация
	                |ГДЕ
	                |	НЕ ПолнаяФискализация.НомерПлатежа В
	                |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |					УспешнаяФискализация.НомерПлатежа
	                |				ИЗ
	                |					УспешнаяФискализация)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДанныеОФД.ПозицияЧека КАК ПозицияЧекаОФД,
	                |	ДанныеОФД.СуммаПозиции КАК СуммаОФД,
	                |	ДанныеОФД.ДатаЧека КАК ДатаЧекаОФД,
	                |	ДанныеОФД.ТипЧека КАК ТипЧекаОФД,
	                |	УспешнаяФискализация.ПозицияЧека КАК ПозицияЧекаУФС,
	                |	УспешнаяФискализация.СуммаПозиции КАК СуммаУФС,
	                |	УспешнаяФискализация.ДатаЧека КАК ДатаЧекаУФС,
	                |	УспешнаяФискализация.ДатаПодтверждения КАК ДатаПодтверждения,
	                |	УспешнаяФискализация.ТипЧека КАК ТипЧекаУФС
	                |ПОМЕСТИТЬ РазличияФискальныхДанных
	                |ИЗ
	                |	ДанныеОФД КАК ДанныеОФД
	                |		ПОЛНОЕ СОЕДИНЕНИЕ УспешнаяФискализация КАК УспешнаяФискализация
	                |		ПО ДанныеОФД.ПозицияЧека = УспешнаяФискализация.ПозицияЧека
	                |			И ДанныеОФД.СуммаПозиции = УспешнаяФискализация.СуммаПозиции
	                |			И ДанныеОФД.ДатаЧека = УспешнаяФискализация.ДатаЧека
	                |			И ДанныеОФД.ТипЧека = УспешнаяФискализация.ТипЧека
	                |ГДЕ
	                |	(ДанныеОФД.ПозицияЧека ЕСТЬ NULL
	                |			ИЛИ УспешнаяФискализация.ПозицияЧека ЕСТЬ NULL)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВЫБОР
	                |		КОГДА РазличияФискальныхДанных.ПозицияЧекаОФД ЕСТЬ NULL
	                |			ТОГДА РазличияФискальныхДанных.ПозицияЧекаУФС
	                |		ИНАЧЕ РазличияФискальныхДанных.ПозицияЧекаОФД
	                |	КОНЕЦ КАК ПозицияЧека,
	                |	ВЫБОР
	                |		КОГДА РазличияФискальныхДанных.ПозицияЧекаОФД ЕСТЬ NULL
	                |			ТОГДА РазличияФискальныхДанных.СуммаУФС
	                |		ИНАЧЕ РазличияФискальныхДанных.СуммаОФД
	                |	КОНЕЦ КАК СуммаПозиции,
	                |	ВЫБОР
	                |		КОГДА РазличияФискальныхДанных.ПозицияЧекаОФД ЕСТЬ NULL
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ КАК ПризнакДанныхУФС,
	                |	ВЫБОР
	                |		КОГДА РазличияФискальныхДанных.ПозицияЧекаОФД ЕСТЬ NULL
	                |			ТОГДА РазличияФискальныхДанных.ДатаЧекаУФС
	                |		ИНАЧЕ РазличияФискальныхДанных.ДатаЧекаОФД
	                |	КОНЕЦ КАК ДатаЧека,
	                |	ЕСТЬNULL(РазличияФискальныхДанных.ДатаПодтверждения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПодтверждения,
	                |	ВЫБОР
	                |		КОГДА РазличияФискальныхДанных.ПозицияЧекаОФД ЕСТЬ NULL
	                |			ТОГДА РазличияФискальныхДанных.ТипЧекаУФС
	                |		ИНАЧЕ РазличияФискальныхДанных.ТипЧекаОФД
	                |	КОНЕЦ КАК ТипЧека,
					|   0 КАК НомерПлатежа 
	                |ИЗ
	                |	РазличияФискальныхДанных КАК РазличияФискальныхДанных
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КОЛИЧЕСТВО(ДанныеОФД.ПозицияЧека) КАК КоличествоПовторений,
	                |	ДанныеОФД.СуммаПозиции КАК СуммаПозиции,
	                |	ДанныеОФД.ПозицияЧека КАК ПозицияЧека,
	                |	ДанныеОФД.ТипЧека КАК ТипЧека
	                |ИЗ
	                |	ДанныеОФД КАК ДанныеОФД
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ДанныеОФД.ПозицияЧека,
	                |	ДанныеОФД.ТипЧека,
	                |	ДанныеОФД.СуммаПозиции
	                |
	                |ИМЕЮЩИЕ
	                |	КОЛИЧЕСТВО(ДанныеОФД.ПозицияЧека) > 1";
	
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("УспешнаяФискализация",УспешнаяФискализация);
	Запрос.УстановитьПараметр("ПолнаяФискализация",ПолнаяФискализация);
	Запрос.УстановитьПараметр("НаименованиеВЧеке",НаименованиеВЧеке);
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
    Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуПоЗапросуССоединением(Соединение,ТекстЗапроса,ТаблицаДляЗаполнения) Экспорт
	
	КолонкаДатаЧека = ТаблицаДляЗаполнения.Колонки.Найти("ДатаЧека");
	Если КолонкаДатаЧека = Неопределено Тогда
		ЗаполняемДатуЧека = Ложь;
	Иначе 
		ЗаполняемДатуЧека = Истина;
	КонецЕсли;
	
	КолонкаПозицияЧека = ТаблицаДляЗаполнения.Колонки.Найти("ПозицияЧека");
	Если КолонкаПозицияЧека = Неопределено Тогда
		ЗаполняемПозицияЧека = Ложь;
	Иначе 
		ЗаполняемПозицияЧека = Истина;
	КонецЕсли;
	
	КолонкаСуммаПозиции = ТаблицаДляЗаполнения.Колонки.Найти("СуммаПозиции");
	Если КолонкаСуммаПозиции = Неопределено Тогда
		ЗаполняемСуммаПозиции = Ложь;
	Иначе 
		ЗаполняемСуммаПозиции = Истина;
	КонецЕсли;
	
	КолонкаТипЧека = ТаблицаДляЗаполнения.Колонки.Найти("ТипЧека");
	Если КолонкаТипЧека = Неопределено Тогда
		ЗаполняемТипЧека = Ложь;
	Иначе 
		ЗаполняемТипЧека = Истина;
	КонецЕсли;
	RecordSet = Соединение.Execute(ТекстЗапроса);
	
	Пока НЕ RecordSet.EOF() Цикл
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		
		Если ЗаполняемПозицияЧека  Тогда
			НоваяСтрока.ПозицияЧека = RecordSet.Fields("Name").Value;
		КонецЕсли;
		
		Если ЗаполняемСуммаПозиции Тогда
			НоваяСтрока.СуммаПозиции = RecordSet.Fields("Sum").Value;
		КонецЕсли;
		
		Если ЗаполняемДатуЧека Тогда
			НоваяСтрока.ДатаЧека = RecordSet.Fields("ReceiptTime").Value;
		КонецЕсли;
		
		НоваяСтрока.НомерПлатежа = RecordSet.Fields("OrderPaymentId").Value;
		Если ЗаполняемТипЧека Тогда
			НоваяСтрока.ТипЧека = RecordSet.Fields("type").Value;
		КонецЕсли;
		RecordSet.MoveNext();
		
	КонецЦикла;
	
	RecordSet.Close();
	
КонецПроцедуры

Функция РазбитьПериодПоДням(ДатаНачала,ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, РазностьДат.НомерДняИзДиапазона) КАК Период
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		aa.a * 1000 + bb.b * 100 + cc.c * 10 + dd.d КАК НомерДняИзДиапазона
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			0 КАК a
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			1
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			2
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			3
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			4
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			5
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			6
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			7
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			8
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			9) КАК aa
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				0 КАК b
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				1
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				2
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				3
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				4
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				5
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				6
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				7
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				8
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				9) КАК bb
	               |			ПО (ИСТИНА)
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				0 КАК c
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				1
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				2
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				3
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				4
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				5
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				6
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				7
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				8
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				9) КАК cc
	               |			ПО (ИСТИНА)
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				0 КАК d
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				1
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				2
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				3
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				4
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				5
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				6
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				7
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				8
	               |			
	               |			ОБЪЕДИНИТЬ
	               |			
	               |			ВЫБРАТЬ
	               |				9) КАК dd
	               |			ПО (ИСТИНА)
	               |	ГДЕ
	               |		aa.a * 1000 + bb.b * 100 + cc.c * 10 + dd.d <= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ)) КАК РазностьДат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, РазностьДат.НомерДняИзДиапазона)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	Запрос.УстановитьПараметр("НачалоПериода",ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",ДатаОкончания);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Возврат ТЗ;
	
	
КонецФункции

Функция ПодготовитьРезультирующуюСтруктуру()
	
	РезультирующаяСтруктура = Новый Структура;
	РезультирующаяСтруктура.Вставить("ИтогоПоЧекамОФД",0);
	РезультирующаяСтруктура.Вставить("ИтогоПоЧекамУФС",0);
	РезультирующаяСтруктура.Вставить("СуммаПоНеУспешнымЧекамУФС",0);
	РезультирующаяСтруктура.Вставить("ЧекиСДублямиОФД",Неопределено);
	РезультирующаяСтруктура.Вставить("НефискализированныеДанныеУФС",Неопределено);
	РезультирующаяСтруктура.Вставить("РазличияФискальныхДанных",Неопределено);
    РезультирующаяСтруктура.Вставить("СтрокаДляПользователя","");
	Возврат РезультирующаяСтруктура;
	
	
КонецФункции

Функция ПодготовитьФискИнфо(ДатаЧека,Позиция,ТипЧека,СуммаПозиции)
	
	ФискальнаяИнформация = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ДанныеПоПозициямЧека.Период КАК Период,
	                |	ДанныеПоПозициямЧека.НомерЧека КАК НомерЧека,
	                |	ДанныеПоПозициямЧека.ПозицияЧека КАК ПозицияЧека,
	                |	ДанныеПоПозициямЧека.Количество КАК Количество,
	                |	ДанныеПоПозициямЧека.Цена КАК Цена,
	                |	ДанныеПоПозициямЧека.Сумма КАК Сумма,
	                |	ДанныеПоПозициямЧека.СуммаНалЧек КАК СуммаНалЧек,
	                |	ДанныеПоПозициямЧека.СуммаБезНалЧек КАК СуммаБезНалЧек,
	                |	ДанныеПоПозициямЧека.НДС20 КАК НДС20,
	                |	ДанныеПоПозициямЧека.НДС10 КАК НДС10,
	                |	ДанныеПоПозициямЧека.НДС120 КАК НДС120,
	                |	ДанныеПоПозициямЧека.НДС110 КАК НДС110,
	                |	ДанныеПоПозициямЧека.НДС0 КАК НДС0,
	                |	ДанныеПоПозициямЧека.СуммаБезНДС КАК СуммаБезНДС,
	                |	ДанныеПоПозициямЧека.ОперацияЧека КАК ОперацияЧека,
	                |	ДанныеПоПозициямЧека.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	                |	ДанныеПоПозициямЧека.НомерФН КАК НомерФН
	                |ИЗ
	                |	РегистрСведений.ДанныеПоПозициямЧека КАК ДанныеПоПозициямЧека
	                |ГДЕ
	                |	ДанныеПоПозициямЧека.Период = &Период
	                |	И ДанныеПоПозициямЧека.ПозицияЧека = &ПозицияЧека
	                |	И ДанныеПоПозициямЧека.ОперацияЧека = &ОперацияЧека
					|	И ДанныеПоПозициямЧека.Сумма = &СуммаПозиции";
					Запрос.УстановитьПараметр("Период",ДатаЧека);
					Запрос.УстановитьПараметр("ПозицияЧека",Позиция);
					Запрос.УстановитьПараметр("ОперацияЧека",?(ТипЧека = 2,"Возврат прихода","Приход"));
					Запрос.УстановитьПараметр("СуммаПозиции",СуммаПозиции);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФискальнаяИнформация = "" + Выборка.НомерЧека + " " + Строка(ДатаЧека);	
	КонецЦикла;
	
	Возврат ФискальнаяИнформация;
	
КонецФункции

Функция РассчитатьСуммуПоТаблице(ТаблицаДанных)
	
	СуммаПоТаблице = 0;
	
	Для Каждого Строка Из ТаблицаДанных Цикл
		
		Если Строка.ТипЧека = 1 Тогда 
			СуммаПоТаблице	 = СуммаПоТаблице + Строка.СуммаПозиции;
		Иначе
			СуммаПоТаблице	 = СуммаПоТаблице - Строка.СуммаПозиции;	
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат СуммаПоТаблице;
	
КонецФункции

Функция ОбработатьИПодготовитьРезультатПоЧекам(МассивДанных,ДатаНачала,ДатаОкончания) Экспорт
	
	СтруктураДанных = ПодготовитьРезультирующуюСтруктуру();
	
	ТаблицаОФД = МассивДанных[0].Выгрузить();
	ИтогоПоЧекамОФД  = РассчитатьСуммуПоТаблице(ТаблицаОФД);
	
	СтруктураДанных.ИтогоПоЧекамОФД = ИтогоПоЧекамОФД;
	
	УспешнаяФискализация = МассивДанных[1].Выгрузить();
	ИтогоПоЧекамУФС = РассчитатьСуммуПоТаблице(УспешнаяФискализация);
	СтруктураДанных.ИтогоПоЧекамУФС = ИтогоПоЧекамУФС;
	
	ЧекиСДублямиОФД = МассивДанных[6].Выгрузить();
	СтруктураДанных.ЧекиСДублямиОФД = ЧекиСДублямиОФД;
	
	НефискализированныеДанныеУФС = МассивДанных[3].Выгрузить();
	НефискализированныеДанныеУФС.Колонки.Добавить("ФискальнаяИнформация",ОбщегоНазначения.ОписаниеТипаСтрока(100),"ФискальнаяИнформация");
	СтруктураДанных.НефискализированныеДанныеУФС = НефискализированныеДанныеУФС;
	
	СуммаПоНеУспешнымЧекамУФС  = РассчитатьСуммуПоТаблице(НефискализированныеДанныеУФС);
	СтруктураДанных.СуммаПоНеУспешнымЧекамУФС = СуммаПоНеУспешнымЧекамУФС;

	РазличияФискальныхДанных = МассивДанных[7];
	СтруктураДанных.РазличияФискальныхДанных = РазличияФискальныхДанных; 
	
	ИЗпрошлыхПериодов = 0;
	ИЗбудущихПериодов = 0;

	ХреньКакаято = 0; 
		
	Для Каждого СтрокаДанных Из РазличияФискальныхДанных Цикл
		
		//ЕстьВДублях = ОбщегоНазначения.ЕстьВТаблице(СтрокаДанных.ПозицияЧека,СтрокаДанных.ТипЧека,ЧекиСДублямиОФД);
		ЕстьВНеуспешных = ОбщегоНазначения.ЕстьВТаблице(СтрокаДанных.НомерПлатежа,СтрокаДанных.ТипЧека,СтрокаДанных.СуммаПозиции,НефискализированныеДанныеУФС);
		
		//Не зафиксирован чек в UFS 
		Если ЕстьВНеуспешных.Количество() > 0 И Не СтрокаДанных.ПризнакДанныхУФС Тогда
			ФискДанные = ПодготовитьФискИнфо(СтрокаДанных.ДатаЧека,СтрокаДанных.ПозицияЧека,СтрокаДанных.ТипЧека,СтрокаДанных.СуммаПозиции);
			Для Каждого СтрокаНеуспешных Из ЕстьВНеуспешных Цикл
				СтрокаНеуспешных.ФискальнаяИнформация = ФискДанные;
				СуммаПоНеУспешнымЧекамУФС =  СуммаПоНеУспешнымЧекамУФС - СтрокаНеуспешных.СуммаПозиции;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаПодтверждения) Тогда			
			//Чек по транзакции из прошлого периода
			Если СтрокаДанных.ДатаПодтверждения < НачалоДня(ДатаНачала) Тогда
				ИЗпрошлыхПериодов = ИЗпрошлыхПериодов + СтрокаДанных.СуммаПозиции;
				Продолжить;
			КонецЕсли;	
			//Чек попал в будущий период
			Если  СтрокаДанных.ДатаЧека > КонецДня(ДатаОкончания)  Тогда 
				ИЗбудущихПериодов = ИЗбудущихПериодов + СтрокаДанных.СуммаПозиции;
				Продолжить;
			КонецЕсли;
		Иначе
			Если Не СтрокаДанных.ПризнакДанныхУФС Тогда
				ХреньКакаято = ХреньКакаято  + СтрокаДанных.СуммаПозиции;
			Иначе 
				ХреньКакаято = ХреньКакаято - СтрокаДанных.СуммаПозиции;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	СуммаДублей = 0;
	Для Каждого Дубль Из ЧекиСДублямиОФД Цикл
		СуммаДублей = Суммадублей + (Дубль.КоличествоПовторений-1)*Дубль.СуммаПозиции;
	КонецЦикла;
	
	ВычислимПоКассе = ИтогоПоЧекамОФД + СуммаПоНеУспешнымЧекамУФС - ИЗпрошлыхПериодов + ИЗбудущихПериодов  - СуммаДублей - ХреньКакаято;
	
	РезультатДляСтатистики = "ИтогоПоЧекам: " + Строка(ИтогоПоЧекамОФД) + " + СуммаПоНеУспешнымЧекам: " + Строка(СуммаПоНеУспешнымЧекамУФС) + " - ИЗпрошлыхПериодов: " + Строка(ИЗпрошлыхПериодов) + " + ИЗбудущихПериодов: " + Строка(ИЗбудущихПериодов) +" - СуммаДублей: " +Строка(СуммаДублей)+ " - " + Строка(ХреньКакаято)+ " = " + Строка(ВычислимПоКассе); 	
	
	СтруктураДанных.СтрокаДляПользователя = РезультатДляСтатистики;
	
	Возврат СтруктураДанных;
		
КонецФункции
